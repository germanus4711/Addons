-------------------------------------------------------------------------------
-- ESO Master Recipe List
-------------------------------------------------------------------------------
--[[
-- Copyright (c) 2015-2024 James A. Keene (Phinix) All rights reserved.
--
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation (the "Software"),
-- to operate the Software for personal use only. Permission is NOT granted
-- to modify, merge, publish, distribute, sublicense, re-upload, and/or sell
-- copies of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
-- HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
-- WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-- FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
-- OTHER DEALINGS IN THE SOFTWARE.
--
-------------------------------------------------------------------------------
--
-- DISCLAIMER:
--
-- This Add-on is not created by, affiliated with or sponsored by ZeniMax
-- Media Inc. or its affiliates. The Elder ScrollsÂ® and related logos are
-- registered trademarks or trademarks of ZeniMax Media Inc. in the United
-- States and/or other countries. All rights reserved.
--
-- You can read the full terms at:
-- https://account.elderscrollsonline.com/add-on-terms
--]]

local ESOMRL = _G['ESOMRL']
local L = ESOMRL.DB.Strings
local DB = ESOMRL.DB
local version = '1.56.76'

-- Library functions:
local pTC = ESOMRL.TColor
local pCO = ESOMRL.Contains
local pGK = ESOMRL.GetKey
local pR2 = ESOMRL.RGB2Hex
local pCK = ESOMRL.CountKeys
local pEA = ESOMRL.SubExtendedASCII
local LAM = LibAddonMenu2
local LAMPanel

local ProvisioningTable		= ESOMRL.AT.ProvisioningTable
local ProvisioningKeys		= ESOMRL.AT.ProvisioningKeys
local FurnitureTable		= ESOMRL.AT.FurnitureTable
local FurnitureKeys			= ESOMRL.AT.FurnitureKeys
local IngredientTable		= ESOMRL.AT.IngredientTable
local IngredientIcons		= {}

local scaleAnimation = ZO_ReversibleAnimationProvider:New("IconSlotMouseOverAnimation")
local dQC = ESOMRL.DB.QualityColors
local sDA = ESOMRL.DB.StationData
local writQuest


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Local variable reference
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local cDefaults, aDefaults			-- (TABLE)		character and account-wide saved variable defaults returned by init

-- session variables
local worldName						-- (STRING)		Megaserver name for current login session (NA, EU, PTS)
local accountName					-- (STRING)		Account @name for current login session
local currentCharID					-- (STRING)		current character unique ID
local FCOItemSaverActive			-- (BOOL)		FCO ItemSaver detection status
local trackingShown = 0				-- (INT)		button spam protection for TrackShown() function
local searchBuffer = 0				-- (INT)		used to ensure only one refresh when trade house scroll list updates

-- navigation list variables
local setPage = 1					-- (INT)		switch between recipe & ingredient pages, 1 = recipes
local setMode = 1					-- (INT)		switch between cooking and furniture pages, 1 = cooking
local editText = 0					-- (INT)		status of the text input search box
local textInput = ""				-- (STRING)		current contents of the text input search box
local stationSelect = ""			-- (STRING)		name of selected station recipe for lookup in MRL
local stationMode = 0				-- (INT)		keeps track of what station type you are using
local stationTab = 0				-- (INT)		variable that tracks the current open tab at crafting stations
local lastProv = 0					-- (INT)		tracks the last tab viewed at the cooking station
local ingSearch = 0					-- (INT)		tracks the last mode for ingredient recipe search
local lastTier = 0					-- (INT)		last clicked quality tier value for refresh
local openTab						-- (INT)		currently displayed recipe list or mode

-- tracked item display variables
local recTracked = 0				-- (INT)		number of tracked cooking recipes
local furTracked = 0				-- (INT)		number of tracked furniture recipes
local ingTracked = 0				-- (INT)		number of tracked ingredients

-- variable tables
local searchTable = {}				-- (TABLE)		main data table for recipe list items
local subKnownTable = {}			-- (TABLE)		sub-table of known recipes generated by table passed to function
local subUnknownTable = {}			-- (TABLE)		sub-table of unknown recipes generated by table passed to function
local subAllTable = {}				-- (TABLE)		indexed table of all known and unknown recipes generated by table passed to function
local qualityCap = {}				-- (TABLE)		text strings for quality level junk/delete protection setting
local stringOpts = {}				-- (TABLE)		text strings for 'known by' tooltip display mode setting
local filterOpts = {}				-- (TABLE)		text strings for the settings dropdown selection for station filter overrides
local stationTabs = {}				-- (TABLE)		text strings for the settings dropdown selection for default station tab
local charIDName = {}				-- (TABLE)		table of all characters on current logged in account indexed by unique ID
local charNamesGUI = {}				-- (TABLE)		sorted table of string names ([1 - i]) of character set to track (used in GUI menu)
local charNamesOPT = {}				-- (TABLE)		sorted table of string names ([1 - i]) of character set to track (used in settings menu)
local statNodes = {}				-- (TABLE)		table of open category controls at the cooking station
local writIng = {}					-- (TABLE)		table of ingredients used in current active provisioning writs
local writList = {}					-- (TABLE)		table to keep track of index of uncrafted writ item in category
local writCraft1 = {}				-- (TABLE)		keeps track of recipeListIndex, recipeIndex for auto-craft requirement 1
local writCraft2 = {}				-- (TABLE)		keeps track of recipeListIndex, recipeIndex for auto-craft requirement 2

-- control variables
local StationControl				-- (OBJ)		reference to provisioning station control
local RecipeItemTooltipControl		-- (OBJ)		used for popup recipe tooltips in the MRL GUI
local IngredientItemTooltipControl	-- (OBJ)		used for popup ingredient tooltips in the MRL GUI
local charnameDropdown				-- (OBJ)		character name list dropdown control
local storeList						-- (TABLE)		ZO_ScrollList table of the currently viewed NPC vendor store items
local writNode						-- (OBJ)		treeNode for the category scroll list of an active un-crafted writ item
local writCon						-- (OBJ)		list control of the un-crafted writ item in the above category scroll list
local writAnim						-- (BOOL)		checks for category open animation completion before scrolling to writ item
local writBuffer					-- (BOOL)		avoid error condition spam when auto crafting writs
local provOpen

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Get and set saved variables
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function GetRecipeSavedVar(index, tier)
	local varDB = (tier == 100) and ESOMRL.CSV.fRecipeTrack or ESOMRL.CSV.pRecipeTrack
	return varDB[index]
end

local function SetRecipeSavedVar(index, tier, val)
	local varDB = (tier == 100) and ESOMRL.CSV.fRecipeTrack or ESOMRL.CSV.pRecipeTrack
	varDB[index] = val
end

local function GetIngredientSavedVar(index)
	return ESOMRL.ASV.aIngTrack[index]
end

local function SetIngredientSavedVar(index, val)
	ESOMRL.ASV.aIngTrack[index] = val
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Various utility functions used in other areas
----------------------------------------------------------------------------------------------------------------------------------------------------------------
local function ScaleSelectedIcon(control, scaledUp, instant) -- Plays ZOS function to zoom icons on mouseover
	if control then
		if scaledUp then
			scaleAnimation:PlayForward(control, instant)
		else
			scaleAnimation:PlayBackward(control, instant)
		end                
	end
end

local function SetTrackedRecipeCountText(option) -- Updates the current tracked recipe display text
	ESOMRL_MainFrameSelectionFrameClearSearchLabel:SetText(L.ESOMRL_CLEAR..' '..pTC("ff9900",L.ESOMRL_TRACKING)..' '..pTC("ffffff",recTracked)..' '..pTC("ff9900",L.ESOMRL_RECIPES..')'))
	ESOMRL_MainFrameFurnitureFrameFClearSearchLabel:SetText(L.ESOMRL_CLEAR..' '..pTC("ff9900",L.ESOMRL_TRACKING)..' '..pTC("ffffff",furTracked)..' '..pTC("ff9900",L.ESOMRL_PATTERNS..')'))
	if option and StationControl ~= nil then
		zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
	end
end

local function SetTrackedIngredientCountText() -- Updates the current tracked ingredient display text
	ESOMRL_MainFrameIngredientsFrameClearIngTrackLabel:SetText(L.ESOMRL_ICLEAR..' '..pTC("ff9900",L.ESOMRL_TRACKING)..' '..pTC("ffffff",ingTracked)..' '..pTC("ff9900",L.ESOMRL_INGREDIENTS..')'))
end

local function RefreshViews() -- Refresh current views when tracking status updates so icons re-populate in real-time
	ZO_ScrollList_RefreshVisible(ZO_PlayerInventoryList)
	ZO_ScrollList_RefreshVisible(ZO_PlayerBankBackpack)
	ZO_ScrollList_RefreshVisible(ZO_HouseBankBackpack)
	ZO_ScrollList_RefreshVisible(ZO_GuildBankBackpack)
	ZO_ScrollList_RefreshVisible(ZO_CraftBagList)
	if ZO_TradingHouseSearch:IsAtTradingHouse() then
		ZO_ScrollList_RefreshVisible(TRADING_HOUSE.searchResultsList)
		ZO_ScrollList_RefreshVisible(TRADING_HOUSE.postedItemsList)
	end
	if not STORE_FRAGMENT:IsHidden() then
		ZO_ScrollList_RefreshVisible(storeList)
	end
end

local function LowerSpaceSpecial(text) -- Remove spaces and change to lower case plus strip all after ':'
-- NOTE: Game/LUA treats non-standard ASCII characters as punctuation so %p can't be used without breaking non-English localization.
-- Partially resolved using lookup table for situations that require removal of actual punctuation for string matching to work (game quirks).
	local cText = pEA(text)
	return zo_strlower(zo_strformat("<<t:1>>",cText)):gsub(":.*",''):gsub("%s",'') -- remove extra M/F tags
end

local function GetTextureId(texturePath) -- Returns the selected icon set for the cooking station marks
	for k, v in pairs(DB.StatOptions) do
		if	v == texturePath then
			return k
		end
	end
	return 0
end

local function SwitchStationIcons(textureId) -- Sets the above station icon texture set to active
	if textureId == 1 then
		for i = 1, 7 do DB.StationIcons[i] = DB.StatIcons[i] end
	elseif textureId == 2 then
		for i = 1, 7 do local b = i + 7 DB.StationIcons[i] = DB.StatIcons[b] end
	end
end

local function RecountTracked() -- Recount tracked recipes/ingredients once when you log in
	RefreshViews()
	recTracked = 0
	furTracked = 0
	ingTracked = 0
	local trackedrecipes = 0
	local trackedpatterns = 0
	local trackedingredients = 0

	for k, v in pairs(ProvisioningTable) do
		local nrId = GetItemLinkItemId(v.item)
		local savedvar = GetRecipeSavedVar(nrId, 1)
		if savedvar == 2 or savedvar == 1 then
			trackedrecipes = trackedrecipes + 1
		end
	end
	for k, v in pairs(IngredientTable) do
		local savedvar = GetIngredientSavedVar(k)
		if savedvar == 1 then
			trackedingredients = trackedingredients + 1
		end
	end
	for k, v in pairs(FurnitureTable) do
		local nrId = GetItemLinkItemId(v.item)
		local savedvar = GetRecipeSavedVar(nrId, 100)
		if savedvar == 2 or savedvar == 1 then
			trackedpatterns = trackedpatterns + 1
		end
	end
	recTracked = trackedrecipes
	furTracked = trackedpatterns
	ingTracked = trackedingredients
	SetTrackedRecipeCountText()
	SetTrackedIngredientCountText()
end

local function CheckCraftStore() -- Support check for CraftStore addon
	if CraftStoreFixed_Cook and CraftStore_Account.Default[GetDisplayName()]["$AccountWide"][GetWorldName()]["options"]["usecook"] ~= nil and CraftStore_Account.Default[GetDisplayName()]["$AccountWide"][GetWorldName()]["options"]["usecook"] == true then return true else return false end
end

local function KnownUnknownDB(bList) -- Builds indexed table of known, unknown, and all recipes from passed table
	local kOnly = ESOMRL.ASV.aOpts.kOnly
	local uOnly = ESOMRL.ASV.aOpts.uOnly
	subKnownTable = {}
	subUnknownTable = {}
	subAllTable = {}

	if bList[1] ~= nil then
		for i = 1, #bList do
			local tData = bList[i]
			if IsItemLinkRecipeKnown(tData.link) then
				table.insert(subKnownTable, #subKnownTable + 1, {key = i, data = tData})
			else
				table.insert(subUnknownTable, #subUnknownTable + 1, {key = i, data = tData})
			end
			table.insert(subAllTable, #subAllTable + 1, {key = i, data = tData})
		end
	elseif bList[1] == nil then
		for k, v in pairs(bList) do
			if IsItemLinkRecipeKnown(v.link) then
				table.insert(subKnownTable, #subKnownTable + 1, {key = k, data = v})
			else
				table.insert(subUnknownTable, #subUnknownTable + 1, {key = k, data = v})
			end
			table.insert(subAllTable, #subAllTable + 1, {key = k, data = v})
		end
	end

	return kOnly, uOnly
end

local function KnownUnknownUI(option) -- Handles known/unknown filter button toggles and tooltips
	if option == 1 then -- Tooltip on for Known
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if ESOMRL.ASV.aOpts.kOnly == true then
			SetTooltipText(InformationTooltip, "Disable show only known.")
		else
			SetTooltipText(InformationTooltip, "Enable show only known.")
		end
	elseif option == 3 then -- Tooltip on for Unknown
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if ESOMRL.ASV.aOpts.uOnly == true then
			SetTooltipText(InformationTooltip, "Disable show only unknown.")
		else
			SetTooltipText(InformationTooltip, "Enable show only unknown.")
		end
	elseif option == 2 or option == 4 then -- Tooltip off
		ClearTooltip(InformationTooltip)
	elseif option == 5 then -- Clicked Known
		if ESOMRL.ASV.aOpts.kOnly == true then
			ESOMRL.ASV.aOpts.kOnly = false
			ESOMRL.ASV.aOpts.uOnly = false
			ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, "Enable show only known.")
		else
			ESOMRL.ASV.aOpts.kOnly = true
			ESOMRL.ASV.aOpts.uOnly = false
			ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_down.dds")
			ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, "Disable show only known.")
		end
		ESOMRL.XMLNavigation(502)
	elseif option == 6 then -- Clicked Unknown
		if ESOMRL.ASV.aOpts.uOnly == true then
			ESOMRL.ASV.aOpts.uOnly = false
			ESOMRL.ASV.aOpts.kOnly = false
			ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, "Enable show only unknown.")
		else
			ESOMRL.ASV.aOpts.uOnly = true
			ESOMRL.ASV.aOpts.kOnly = false
			ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
			ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_down.dds")
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, "Disable show only unknown.")
		end
		ESOMRL.XMLNavigation(502)
	end
end

local function LangFormat(langText) -- ZOS function for removing special characters from names in various languages.
	return zo_strformat("<<t:1>>",langText)
end

local function GetItemLinkFromID(itemId)
	return string.format("|H0:item:%d:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0|h|h", itemId)
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Functions to show and hide the recipe list, adjust for language settings, and remember position
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function RestorePosition() -- Restores previous window position when opened
	local left = ESOMRL.ASV.aOpts.xpos
	local top = ESOMRL.ASV.aOpts.ypos
	ESOMRL_MainFrame:ClearAnchors()
	ESOMRL_MainFrame:SetAnchor(TOPLEFT, GuiRoot, TOPLEFT, left, top)
end

local function FormatTooltipText(text) -- Formats tooltip data by language
	if GetCVar('Language.2') == 'en' then
		return text
	else
		text = text:gsub('Any Level',L.ESOMRL_ANY)
		text = text:gsub('Level',L.ESOMRL_LEVEL)
		text = text:gsub('Food',L.ESOMRL_FOOD)
		text = text:gsub('Drink',L.ESOMRL_DRINK)
		text = text:gsub('Psijic Ambrosia',LangFormat(GetItemLinkName(GetItemLinkRecipeResultItemLink("|H1:item:64223:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0|h|h"))))
		return text
	end
end

local function CloseMain(option) -- Closes the main window and returns cursor control
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_CLOSE)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		SCENE_MANAGER:HideTopLevel(ESOMRL_MainFrame)
	end
end

local function InfoTooltip(option) -- Show the legend for the active panel
	if setPage == 1 then
		if option == 1 then
			ESOMRL_MainFrameInfoBox:SetHidden(false)
		elseif option == 2 then
			ESOMRL_MainFrameInfoBox:SetHidden(true)
		end
	elseif setPage == 0 then
		if setMode == 0 then
			if option == 1 then
				ESOMRL_MainFrameInfoBox:SetHidden(false)
			elseif option == 2 then
				ESOMRL_MainFrameInfoBox:SetHidden(true)
			end
		else
			if option == 1 then
				ESOMRL_MainFrameInfoBoxIng:SetHidden(false)
			elseif option == 2 then
				ESOMRL_MainFrameInfoBoxIng:SetHidden(true)
			end
		end
	end
end

local function StatusTooltip(option) -- Show selected character's recipe status
	if option == 1 then
		local pCount = pCK(ProvisioningTable)
		local fCount = pCK(FurnitureTable)
		local kProv = 0
		local kFurn = 0
		for k, v in pairs(ProvisioningTable) do
			local nrId = GetItemLinkItemId(v.item)
			if pCO(ESOMRL.ASV.pRecipeKnown[nrId].IDs, currentCharID) then
				kProv = kProv + 1
			end
		end
		for k, v in pairs(FurnitureTable) do
			local nrId = GetItemLinkItemId(v.item)
			if pCO(ESOMRL.ASV.fRecipeKnown[nrId].IDs, currentCharID) then
				kFurn = kFurn + 1
			end
		end
		local hString = pTC("ffffff",L.ESOMRL_Status1)..'\n'
		local pString1 = L.ESOMRL_Status2..pTC("ffffff",tostring(kProv))..L.ESOMRL_Status3..'\n'
		local pString2 = L.ESOMRL_Status5..pTC("ffffff",tostring(pCount))..' '..L.ESOMRL_Status6..pTC("ffffff",tostring(pCount-kProv))..'\n'
		local fString1 = L.ESOMRL_Status2..pTC("ffffff",tostring(kFurn))..L.ESOMRL_Status4..'\n'
		local fString2 = L.ESOMRL_Status5..pTC("ffffff",tostring(fCount))..' '..L.ESOMRL_Status6..pTC("ffffff",tostring(fCount-kFurn))
		local tString = hString..pString1..pString2..fString1..fString2

		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, tString)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end	
end

local function ToggleTooltips(option) -- Handles turning list item tooltips on and off
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if ESOMRL.ASV.aOpts.lttshow == 1 then
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTHIDE)
		else
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTSHOW)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if ESOMRL.ASV.aOpts.lttshow == 1 then
			ESOMRL.ASV.aOpts.lttshow = 0
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTSHOW)
		else
			ESOMRL.ASV.aOpts.lttshow = 1
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTHIDE)
		end
	end
end

local function IngredientPanelSetup() -- Configure the ingredients display when the panel is shown
	for k, v in pairs(IngredientTable) do
		local overlay = GetControl('ESOMRL_MainFrameIngredientsFrameIBoverlay'..tostring(k))
		local sVar = GetIngredientSavedVar(k)
		if sVar == 1 then
			overlay:SetHidden(false)
		elseif sVar == 0 then
			overlay:SetHidden(true)
		end
	end
	if ESOMRL.ASV.aOpts.destroyjunkingredients == true then
		if ESOMRL.ASV.aOpts.destroyunmarkedingredients == 0 then
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		elseif ESOMRL.ASV.aOpts.destroyunmarkedingredients == 1 then
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		end
	elseif ESOMRL.ASV.aOpts.destroyjunkingredients == false then
		if ESOMRL.ASV.aOpts.junkunmarkedingredients == 0 then
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		elseif ESOMRL.ASV.aOpts.junkunmarkedingredients == 1 then
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		end
	end
end

local function RecipePanelSetup() -- Configure the recipe display when the panel is shown
	local destroyjunkrecipes = ESOMRL.ASV.aOpts.destroyjunkrecipes
	local destroyunmarkedrecipes = ESOMRL.ASV.aOpts.destroyunmarkedrecipes
	local junkunmarkedrecipes = ESOMRL.ASV.aOpts.junkunmarkedrecipes
	if destroyjunkrecipes == true then
		if destroyunmarkedrecipes == 0 then
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		elseif destroyunmarkedrecipes == 1 then
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		end
	elseif destroyjunkrecipes == false then
		if junkunmarkedrecipes == 0 then
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		elseif junkunmarkedrecipes == 1 then
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		end
	end
	if ESOMRL.ASV.aOpts.kOnly == true then
		ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_down.dds")
		ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
	elseif ESOMRL.ASV.aOpts.uOnly == true then
		ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
		ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_down.dds")
	else
		ESOMRL_MainFrameListFrameBatchTrackingKnownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
		ESOMRL_MainFrameListFrameBatchTrackingUnknownFilter:SetNormalTexture("/esoui/art/treeicons/provisioner_indexicon_stew_up.dds")
	end
end

local function RecipeOptionPanel(option) -- Handles turning recipe config panel on and off
	local recipeconfigpanel = ESOMRL.ASV.aOpts.recipeconfigpanel
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if recipeconfigpanel == 0 then
			SetTooltipText(InformationTooltip, L.ESOMRL_SRCONFIGPANEL)
		elseif recipeconfigpanel == 1 then
			SetTooltipText(InformationTooltip, L.ESOMRL_HRCONFIGPANEL)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if recipeconfigpanel == 0 then
			ESOMRL.ASV.aOpts.recipeconfigpanel = 1
			ESOMRL_MainFrameListFrameBatchTracking:SetHidden(false)
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_HRCONFIGPANEL)
		elseif recipeconfigpanel == 1 then
			ESOMRL.ASV.aOpts.recipeconfigpanel = 0
			ESOMRL_MainFrameListFrameBatchTracking:SetHidden(true)
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_SRCONFIGPANEL)
		end
		RecipePanelSetup()
	end
end

local function RecipePanelRestore() -- Restore previous status of recipe config panel on load
	local recipeconfigpanel = ESOMRL.ASV.aOpts.recipeconfigpanel
	if recipeconfigpanel == 0 then
		ESOMRL_MainFrameListFrameBatchTracking:SetHidden(true)
	elseif recipeconfigpanel == 1 then
		ESOMRL_MainFrameListFrameBatchTracking:SetHidden(false)
	end
	RecipePanelSetup()
end

local function OnCharacterSelected(_, charName, choice) -- Dropbox callback
	currentCharID = pGK(charIDName, charName)
end

local function UpdateTrackCharList(charID) -- If tracking character is removed reset and disable options
	if ESOMRL.ASV.aOpts.tchart then
		if ESOMRL.ASV.aOpts.foodtrackingchar == charID or ESOMRL.ASV.aOpts.furntrackingchar == charID then
			if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
				ESOMRL.ASV.aOpts.foodtrackingchar = tostring(GetCurrentCharacterId())
			elseif #charNamesOPT > 0 then
				ESOMRL.ASV.aOpts.foodtrackingchar = pGK(charIDName, charNamesOPT[1])
			end
			if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
				ESOMRL.ASV.aOpts.furntrackingchar = charID
			elseif #charNamesOPT > 0 then
				ESOMRL.ASV.aOpts.furntrackingchar = pGK(charIDName, charNamesOPT[1])
			end
			ESOMRL.ASV.aOpts.tchart = false
			ESOMRL.ASV.aOpts.tchartK = false
			d(L.ESOMRL_TCDEL)
			CALLBACK_MANAGER:FireCallbacks("LAM-RefreshPanel", LAMPanel)
			RefreshViews()
		end
	end
end

local function RemoveCharacter(option, cID, cName) -- Handles removing selected character from the tracking database
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_REMOVECHAR)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if currentCharID ~= tostring(GetCurrentCharacterId()) then
			if MasterRecipeList[worldName][accountName] ~= nil then
				if MasterRecipeList[worldName][accountName][currentCharID] ~= nil then
					if MasterRecipeList[worldName][accountName][currentCharID].CharacterSettings.cOpts.trackChar == true then
						MasterRecipeList[worldName][accountName][currentCharID].CharacterSettings.cOpts.trackChar = false
					end
				end
			end
			-- remove the selected character from the current name tables.
			table.remove(charNamesOPT, pGK(charNamesOPT, charIDName[currentCharID]))
			table.remove(charNamesGUI, pGK(charNamesGUI, charIDName[currentCharID]))

			for k, v in pairs(ProvisioningTable) do -- remove the selected character from the global tracking database.
				local nrId = GetItemLinkItemId(v.item)
				if pCO(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.pRecipeKnown[nrId].IDs, currentCharID) then
					local key = pGK(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.pRecipeKnown[nrId].IDs, currentCharID)
					table.remove(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.pRecipeKnown[nrId].IDs, key)
				end
			end
			for k, v in pairs(FurnitureTable) do
				local nrId = GetItemLinkItemId(v.item)
				if pCO(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.fRecipeKnown[nrId].IDs, currentCharID) then
					local key = pGK(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.fRecipeKnown[nrId].IDs, currentCharID)
					table.remove(MasterRecipeList[worldName][accountName]["$AccountWide"].AccountSettings.fRecipeKnown[nrId].IDs, key)
				end
			end
			UpdateTrackCharList(currentCharID) -- if tracking character is removed reset and disable options
			currentCharID = tostring(GetCurrentCharacterId()) -- set the addon-global active name to the current character ID.
			charnameDropdown.dropdown:ClearItems() -- clear the list of names in the dropdown menu so we can rebuild.
			for k,v in ipairs(charNamesGUI) do -- rebuild using the names table we just removed a character from.
				local entry = charnameDropdown.dropdown:CreateItemEntry(v, OnCharacterSelected)
				charnameDropdown.dropdown:AddItem(entry)
			end
			charnameDropdown.dropdown:SetSelectedItem(charIDName[currentCharID])
		end
	elseif option == 4 then
		currentCharID = cID
		RemoveCharacter(3, cID, cName)
	end
end

local function SetupCharacters() -- Initialize and update account list & dropbox selection of all tracked characters
	local charNamesOPT_T = {}
	local charNamesGUI_T = {}
	local tempIDs = {}
	currentCharID = tostring(GetCurrentCharacterId())

	if charnameDropdown == nil then
		charnameDropdown = WINDOW_MANAGER:CreateControlFromVirtual('CharacterDropdownList', ESOMRL_MainFrameListFrameBatchTracking, 'ZO_StatsDropdownRow')
		charnameDropdown:SetWidth(300)
		charnameDropdown:SetAnchor(TOPLEFT, ESOMRL_MainFrameListFrameBatchTracking, TOPLEFT, -4, 2)
		charnameDropdown:GetNamedChild('Dropdown'):SetWidth(295)
	end
	for i = 1, GetNumCharacters() do -- populate table of all character names on the current account indexed by unique ID
		local charName, _, _, _, _, _, charID = GetCharacterInfo(i)
		tempIDs[#tempIDs + 1] = {name = zo_strformat(SI_UNIT_NAME, charName), ID = charID}
		charIDName[charID] = zo_strformat(SI_UNIT_NAME, charName)
	end
	for characterID, _ in pairs(MasterRecipeList[worldName][accountName]) do -- remove character from account variables if not a valid existing character on the account
		if characterID ~= "$AccountWide" then
			if charIDName[characterID] == nil then
				MasterRecipeList[worldName][accountName][characterID] = nil
			end
		end
	end
	for k, v in ipairs(tempIDs) do -- build list of valid account characters the addon knows about and are set to track
		local cName = tempIDs[k].name
		local cID = tempIDs[k].ID
		if MasterRecipeList[worldName][accountName][cID] ~= nil then
			if MasterRecipeList[worldName][accountName][cID].CharacterSettings.cOpts.trackChar == true then
				charNamesOPT_T[#charNamesOPT_T + 1] = cName
				charNamesGUI_T[#charNamesGUI_T + 1] = cName
			else
				UpdateTrackCharList(cID) -- if tracking character is removed reset and disable options
				if cID == currentCharID then -- keep addon settings and GUI selection separate to always allow current character functions in GUI
					charNamesGUI_T[#charNamesGUI_T + 1] = cName
				end
				RemoveCharacter(4, cID, cName)
			end
		end
	end
	 -- sort character database alphabetically or as account order
	charNamesOPT = (ESOMRL.ASV.aOpts.sortAlpha) and table.sort(charNamesOPT_T) or charNamesOPT_T
	charNamesGUI = (ESOMRL.ASV.aOpts.sortAlpha) and table.sort(charNamesGUI_T) or charNamesGUI_T

	if ESOMRL.ASV.aOpts.foodtrackingchar == "" then
		if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
			ESOMRL.ASV.aOpts.foodtrackingchar = currentCharID
		elseif #charNamesOPT > 0 then
			ESOMRL.ASV.aOpts.foodtrackingchar = pGK(charIDName, charNamesOPT[1])
		end
	 end
	if ESOMRL.ASV.aOpts.furntrackingchar == "" then
		if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
			ESOMRL.ASV.aOpts.furntrackingchar = currentCharID
		elseif #charNamesOPT > 0 then
			ESOMRL.ASV.aOpts.furntrackingchar = pGK(charIDName, charNamesOPT[1])
		end
	 end
	charnameDropdown.dropdown:ClearItems()
	for k,v in ipairs(charNamesGUI) do
		local entry = charnameDropdown.dropdown:CreateItemEntry(v, OnCharacterSelected)
		charnameDropdown.dropdown:AddItem(entry)
	end
	charnameDropdown.dropdown:SetSelectedItem(charIDName[currentCharID]) -- set the dropdown selected item to the current character

end

local function InitKnown() -- Re-scans for known recipes any time you learn a recipe or open the recipe book

-- Saved variable values:
-- 0 = unknown untracked
-- 1 = unknown tracked
-- 2 = known tracked
-- 3 = known untracked

	local playerID = tostring(GetCurrentCharacterId())
	for k, v in pairs(ProvisioningTable) do
		local nrId = GetItemLinkItemId(v.item)
		local savedvar = GetRecipeSavedVar(nrId, 1)
		if IsItemLinkRecipeKnown(v.link) == true then
			if (savedvar == 2) or (savedvar == 1) then
				SetRecipeSavedVar(nrId, 1, 2)
			else
				SetRecipeSavedVar(nrId, 1, 3)
			end
			if ESOMRL.CSV.cOpts.trackChar == true then
				if not pCO(ESOMRL.ASV.pRecipeKnown[nrId].IDs, playerID) then
					table.insert(ESOMRL.ASV.pRecipeKnown[nrId].IDs, #ESOMRL.ASV.pRecipeKnown[nrId].IDs + 1, playerID)
				end
			else
				if pCO(ESOMRL.ASV.pRecipeKnown[nrId].IDs, playerID) then
					table.remove(ESOMRL.ASV.pRecipeKnown[nrId].IDs, pGK(ESOMRL.ASV.pRecipeKnown[nrId].IDs, playerID))
				end
			end
		else
			if (savedvar == 2) or (savedvar == 1) then
				SetRecipeSavedVar(nrId, 1, 1)
			else
				SetRecipeSavedVar(nrId, 1, 0)
			end
		end
	end
	for k, v in pairs(FurnitureTable) do
		local nrId = GetItemLinkItemId(v.item)
		local savedvar = GetRecipeSavedVar(nrId, 100)
		if IsItemLinkRecipeKnown(v.link) == true then
			if (savedvar == 2) or (savedvar == 1) then
				SetRecipeSavedVar(nrId, 100, 2)
			else
				SetRecipeSavedVar(nrId, 100, 3)
			end
			if ESOMRL.CSV.cOpts.trackChar == true then
				if not pCO(ESOMRL.ASV.fRecipeKnown[nrId].IDs, playerID) then
					table.insert(ESOMRL.ASV.fRecipeKnown[nrId].IDs, #ESOMRL.ASV.fRecipeKnown[nrId].IDs + 1, playerID)
				end
			else
				if pCO(ESOMRL.ASV.fRecipeKnown[nrId].IDs, playerID) then
					table.remove(ESOMRL.ASV.fRecipeKnown[nrId].IDs, pGK(ESOMRL.ASV.fRecipeKnown[nrId].IDs, playerID))
				end
			end
		else
			if (savedvar == 2) or (savedvar == 1) then
				SetRecipeSavedVar(nrId, 100, 1)
			else
				SetRecipeSavedVar(nrId, 100, 0)
			end
		end
	end
	RecountTracked()
	RefreshViews()
end

local function ToggleIngredientPanel(option) -- Handles the actual swapping of visible controls when toggling ingredient panel
	if option == 1 then
		ESOMRL_MainFrameSelectionFrame:SetHidden(false)
		ESOMRL_MainFrameFurnitureFrame:SetHidden(true)
		ESOMRL_MainFrameListFrame:SetHidden(false)
		ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
		ESOMRL_MainFrameFoodButton:SetHidden(true)
		ESOMRL_MainFrame3DButton:SetHidden(true)
		ESOMRL_MainFrameFurnitureButton:SetHidden(false)
		ESOMRL_MainFramePageButton:SetHidden(false)
		ESOMRL_MainFramePageButton:ClearAnchors()
		ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFurnitureButton, TOPRIGHT, -9, 0)
		ESOMRL_MainFrameListFrameQuality:SetHidden(false)
	else
		ESOMRL_MainFrameSelectionFrame:SetHidden(true)
		ESOMRL_MainFrameFurnitureFrame:SetHidden(false)
		ESOMRL_MainFrameListFrame:SetHidden(false)
		ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
		ESOMRL_MainFrameFoodButton:SetHidden(false)
		
	--	3D Preview disabled due to API change
	--	ESOMRL_MainFrame3DButton:SetHidden(false)
		ESOMRL.ASV.aOpts.previewicon = false
	
		ESOMRL_MainFrameFurnitureButton:SetHidden(true)
		ESOMRL_MainFramePageButton:SetHidden(false)
		ESOMRL_MainFramePageButton:ClearAnchors()
		ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFoodButton, TOPRIGHT, -9, 0)
		ESOMRL_MainFrameListFrameQuality:SetHidden(true)
	end
end

local function SwitchPage(option) -- Handles switching between recipe and ingredient pages
	if option == 1 then
		if setPage == 1 then
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_SHOWING)
		elseif setPage == 0 then
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_SHOWRECIPE)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if setPage == 1 then
			ClearTooltip(InformationTooltip)
			ESOMRL_MainFrameSelectionFrame:SetHidden(true)
			ESOMRL_MainFrameFurnitureFrame:SetHidden(true)
			ESOMRL_MainFrameListFrame:SetHidden(true)
			ESOMRL_MainFrameIngredientsFrame:SetHidden(false)
			ESOMRL_MainFrameFoodButton:SetHidden(true)
			ESOMRL_MainFrame3DButton:SetHidden(true)
			ESOMRL_MainFrameFurnitureButton:SetHidden(true)
			ESOMRL_MainFramePageButton:SetHidden(false)
			ESOMRL_MainFramePageButton:ClearAnchors()
			ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrame, TOPLEFT, -7, -6)
			SetTrackedIngredientCountText()
			IngredientPanelSetup()
			setPage = 0
		elseif setPage == 0 then
			if setMode == 1 then
				ClearTooltip(InformationTooltip)
				ToggleIngredientPanel(1)
				ESOMRL.XMLNavigation(304, nil, nil, 1)
			elseif setMode == 0 then
				ClearTooltip(InformationTooltip)
				ToggleIngredientPanel(0)
				ESOMRL.XMLNavigation(304, nil, nil, 102)			
			end
			setPage = 1
		end
	end
end

local function SwitchMode(option) -- Handles switching between recipe and furniture modes
	if option == 1 then
		if setMode == 1 then
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_SHOWFURNITURE)
		elseif setMode == 0 then
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_SHOWRECIPE)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if setMode == 1 then
			ClearTooltip(InformationTooltip)
			ToggleIngredientPanel(0)
			setPage = 1
			setMode = 0
			ESOMRL.XMLNavigation(304, nil, nil, 102)
		elseif setMode == 0 then
			ClearTooltip(InformationTooltip)
			ToggleIngredientPanel(1)
			setPage = 1
			setMode = 1
			ESOMRL.XMLNavigation(304, nil, nil, 1)
		end
	end
end

local function WritButton(option) -- Button tooltip for writ lookups
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_FINDWRIT)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end
end

local function MoveStopSet(option, control) -- Saves the current window position when closed
	if option == 1 then
		ESOMRL.ASV.aOpts.xpos = ESOMRL_MainFrame:GetLeft()
		ESOMRL.ASV.aOpts.ypos = ESOMRL_MainFrame:GetTop()
	elseif option == 2 then
		if stationMode and stationMode ~=0 then
			ESOMRL.ASV.aOpts.sttx[stationMode] = control:GetLeft()
			ESOMRL.ASV.aOpts.stty[stationMode] = control:GetTop()
		end
	end
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Functions related to the quest-event-based tracking of writ requirements
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function SetWritIngredients(ing)
	local linkcheck = ProvisioningTable[ProvisioningKeys[ing].ID].link
	local numIngredients = GetItemLinkRecipeNumIngredients(linkcheck)

	for n = 1, numIngredients do
		local ingLink = GetItemLinkRecipeIngredientItemLink(linkcheck, n)
		local ingId = GetItemLinkItemId(ingLink)

		for k, v in pairs(IngredientTable) do
			local checkId = GetItemLinkItemId(v.link)
			if checkId == ingId then
				if not writIng[k] then
					writIng[k] = k
				end
			end
		end
	end
end

local function GetWritID()
	for i = 1, MAX_JOURNAL_QUESTS do
		if IsValidQuestIndex(i) then
			local questType = GetJournalQuestType(i)
			if questType == 4 then
				local questName = LangFormat(GetJournalQuestName(i))
				if string.find(questName, writQuest) then
					return i
				end
			end
		end
	end
	return 0
end

local function StationWritCheck()
	local writIndex = GetWritID()
	local questTable = {}
	writIng = {}
	if writIndex == 0 then
		ESOMRL.CSV.cOpts.cWrit1 = 0
		ESOMRL.CSV.cOpts.cWrit2 = 0
		ESOMRL.CSV.cOpts.cW1Crafted = 0
		ESOMRL.CSV.cOpts.cW2Crafted = 0
		return
	end
	for i = 1, GetJournalQuestNumConditions(writIndex) do
		local conditionText, current, _, _, _, _, _, conditionType = GetJournalQuestConditionInfo(writIndex,1,i)
		local itemId = GetQuestConditionItemInfo(writIndex, 1, i)
		if conditionType ~= 45 then
			local tInd = #questTable + 1
			questTable[tInd] = {cc=current, ic=itemId}
		--	d("ID: "..tostring(tInd).." cc: "..tostring(current).." ic: "..GetItemLinkFromID(itemId))
		end
	end

	if questTable[1] then
		ESOMRL.CSV.cOpts.cWrit1 = questTable[1].ic
		if questTable[1].cc == 0 then
			ESOMRL.CSV.cOpts.cW1Crafted = 0
		else
			ESOMRL.CSV.cOpts.cW1Crafted = 1
		end
		SetWritIngredients(questTable[1].ic)
	end
	if questTable[2] then
		ESOMRL.CSV.cOpts.cWrit2 = questTable[2].ic
		if questTable[2].cc == 0 then
			ESOMRL.CSV.cOpts.cW2Crafted = 0
		else
			ESOMRL.CSV.cOpts.cW2Crafted = 1
		end
		SetWritIngredients(questTable[2].ic)
	end

	-- reset writ crafting status and send back to auto-craft so 2nd item can be crafted (if necessary)
	if ESOMRL.CSV.cOpts.cW1Crafted == 0 or ESOMRL.CSV.cOpts.cW2Crafted == 0 then
		zo_callLater(function() ESOMRL.AutoCraftWrits() end, 10)
	end
end

local function OnQuestAdded(eventCode, journalIndex, questName, objectiveName)
	if LangFormat(questName) == writQuest then
		StationWritCheck()
	end
end

local function ClearWritTarget()
	writAnim = nil
	if writNode and writCon then 
		writNode:ClearSelectedNode(writCon)
	end
end

local function OnQuestRemoved(eventCode, isCompleted, journalIndex, questName, zoneIndex, poiIndex)
	if LangFormat(questName) == writQuest then
		ESOMRL.CSV.cOpts.cWrit1 = 0
		ESOMRL.CSV.cOpts.cWrit2 = 0
		ESOMRL.CSV.cOpts.cW1Crafted = 0
		ESOMRL.CSV.cOpts.cW2Crafted = 0
		ClearWritTarget()
		return
	end
end

local function OnQuestComplete(eventCode, questName, level, previousExperience, currentExperience, rank, previousPoints, currentPoints)
	if LangFormat(questName) == writQuest then
		ESOMRL.CSV.cOpts.cWrit1 = 0
		ESOMRL.CSV.cOpts.cWrit2 = 0
		ESOMRL.CSV.cOpts.cW1Crafted = 0
		ESOMRL.CSV.cOpts.cW2Crafted = 0
		ClearWritTarget()
		return
	end
end

local function OnQuestConditionCounterChanged(eventCode, journalIndex, questName, conditionText, conditionType, currConditionVal, newConditionVal, conditionMax, isFailCondition, stepOverrideText, isPushed, isComplete, isConditionComplete, isStepHidden)
	if LangFormat(questName) == writQuest then
		local questTable = {}
		local function StopAutoCraft()
			local pMode = (IsInGamepadPreferredMode()) and GAMEPAD_PROVISIONER or PROVISIONER
			pMode["provisionerStationInteraction"].OnInteractionCanceled()
		end

		for i = 1, GetJournalQuestNumConditions(journalIndex) do
			local conditionText, current, _, _, _, _, _, conditionType = GetJournalQuestConditionInfo(journalIndex,1,i)
			if conditionType ~= 45 then
				questTable[#questTable + 1] = {cc=current}
			end
		end

		if (questTable[1] and questTable[1].cc ~= 0) and (questTable[2] and questTable[2].cc ~= 0) then
			ClearWritTarget()
			StopAutoCraft()
			return
		else
			StationWritCheck()
		end
	end
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Adds custom tooltip information based on various options
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function AddRecipeTooltipLine(control, itemId, itemLink, isRecipe, isFurniture, gStore) -- Modifies tooltip based on various options
	local recLink
	local resLink
	local recId
	local resId
	if (isRecipe) then
		recLink = itemLink
		recId = itemId
		resLink = GetItemLinkRecipeResultItemLink(itemLink)
		resId = GetItemLinkItemId(resLink)
	else
		recLink = (isFurniture) and FurnitureTable[FurnitureKeys[itemId].ID].link or ProvisioningTable[ProvisioningKeys[itemId].ID].link
		recId = GetItemLinkItemId(recLink)
		resLink = itemLink
		resId = itemId
	end
	local saved = (isFurniture) and GetRecipeSavedVar(resId, 100) or GetRecipeSavedVar(resId, 1)
	local knownDB = (isFurniture) and ESOMRL.ASV.fRecipeKnown or ESOMRL.ASV.pRecipeKnown
	local skipResGS = ((ESOMRL.ASV.aOpts.ingfoodgs) and (gStore)) and true or false
	local skipRecGS = ((ESOMRL.ASV.aOpts.ingrecsgs) and (gStore)) and true or false

	if (isFurniture) then  -- Show housing editor furniture categories (if enabled in options)
		if (ESOMRL.ASV.aOpts.furnCats) then
			local categoryId, subcategoryId = GetFurnitureDataCategoryInfo(GetItemLinkFurnitureDataId(resLink))
			control:AddVerticalPadding(10)
			control:AddLine(L.ESOMRL_HOUSINGCAT, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			control:AddVerticalPadding(-10)
			control:AddLine(pTC(dQC[2], GetFurnitureCategoryName(categoryId)..' - '..GetFurnitureCategoryName(subcategoryId)), 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
		end
	end

	if (isRecipe) then -- Show ingredients in recipe item tooltips (if enabled in options)
		if (ESOMRL.ASV.aOpts.ingrecs) and (not skipRecGS) then
			control:AddVerticalPadding(10)
			control:AddLine(L.ESOMRL_INGFOOD, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			local ingnumber = GetItemLinkRecipeNumIngredients(recLink)
			for i = 1, ingnumber do
				local ing, num, req = GetItemLinkRecipeIngredientInfo(recLink, i)
				local ingLink = GetItemLinkRecipeIngredientItemLink(recLink, i)
				local ingIcon = GetItemLinkIcon(ingLink)
				local ingID = GetItemLinkItemId(ingLink)
				local icon = (ingIcon ~= "" and ingIcon ~= nil) and ingIcon or "/esoui/art/icons/icon_missing.dds"
				local color = (IngredientIcons[ingID] and ESOMRL.ASV.aOpts.ingcolors) and IngredientIcons[ingID].color or "ffffff"
				local ingstring = '|t24:24:'..ingIcon..'|t '..pTC(color,LangFormat(ing))..': |t32:32:/esoui/art/icons/servicetooltipicons/servicetooltipicon_cookingstation.dds|t'..req..'  |t24:24:/esoui/art/icons/mapkey/mapkey_bank.dds|t '..num
				control:AddVerticalPadding(-10)
				control:AddLine(ingstring, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			end
		end
	else  -- Show ingredients in result item tooltips (if enabled in global options)
		if (ESOMRL.ASV.aOpts.ingfood) and (not skipResGS) then
			control:AddVerticalPadding(10)
			control:AddLine(L.ESOMRL_INGFOOD, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			local ingnumber = GetItemLinkRecipeNumIngredients(recLink)
			for i = 1, ingnumber do
				local ing, num, req = GetItemLinkRecipeIngredientInfo(recLink, i)
				local ingLink = GetItemLinkRecipeIngredientItemLink(recLink, i)
				local ingIcon = GetItemLinkIcon(ingLink)
				local ingID = GetItemLinkItemId(ingLink)
				local icon = (ingIcon ~= "" and ingIcon ~= nil) and ingIcon or "/esoui/art/icons/icon_missing.dds"
				local color = (IngredientIcons[ingID] and ESOMRL.ASV.aOpts.ingcolors) and IngredientIcons[ingID].color or "ffffff"
				local ingstring = '|t24:24:'..ingIcon..'|t '..pTC(color,LangFormat(ing))..': |t32:32:/esoui/art/icons/servicetooltipicons/servicetooltipicon_cookingstation.dds|t'..req..'  |t24:24:/esoui/art/icons/mapkey/mapkey_bank.dds|t '..num
				control:AddVerticalPadding(-10)
				control:AddLine(ingstring, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			end
		end
	end

	if (ESOMRL.ASV.aOpts.known) then -- Show list of characters who know/are able to craft the given recipe or food item in tooltips
		local namestring = ''
		local cstring = ''
		local nString
		local tNames = {}
		local kSformat = ESOMRL.ASV.aOpts.kSformat

		for _, v in ipairs(charNamesOPT) do
			local kString = pGK(charIDName, v)
			if kSformat == 1 then -- only characters who know the recipe
				if pCO(knownDB[resId].IDs, kString) then
					local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcolork,v)}
					table.insert(tNames, #tNames + 1, val)
				end
			elseif kSformat == 2 then -- only characters who do not know the recipe
				if not pCO(knownDB[resId].IDs, kString) then
					local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcoloru,v)}
					table.insert(tNames, #tNames + 1, val)
				end
			elseif kSformat == 3 then -- all characters color coded by knowledge of recipe
				if pCO(knownDB[resId].IDs, kString) then
					local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcolork,v)}
					table.insert(tNames, #tNames + 1, val)
				elseif not pCO(knownDB[resId].IDs, kString) then
					local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcoloru,v)}
					table.insert(tNames, #tNames + 1, val)
				end
			elseif kSformat == 4 then -- hold shift to toggle showing known/unknown
				if IsShiftKeyDown() == false then
					if pCO(knownDB[resId].IDs, kString) then
						local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcolork,v)}
						table.insert(tNames, #tNames + 1, val)
					end
				else
					if not pCO(knownDB[resId].IDs, kString) then
						local val = {pname = v, cname = pTC(ESOMRL.ASV.aOpts.ttcoloru,v)}
						table.insert(tNames, #tNames + 1, val)
					end
				end
			end
		end
		control:AddVerticalPadding(10)
		ZO_Tooltip_AddDivider(control)
		control:AddVerticalPadding(10)

		if (isRecipe) then
			if kSformat == 1 or kSformat == 3 or (kSformat == 4 and IsShiftKeyDown() == false) then
				control:AddLine(L.ESOMRL_KNOWN, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			else
				control:AddLine(L.ESOMRL_UNKNOWN, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			end
		else
			if kSformat == 1 or kSformat == 3 or (kSformat == 4 and IsShiftKeyDown() == false) then
				control:AddLine(L.ESOMRL_CRAFTABLE, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			else
				control:AddLine(L.ESOMRL_CRAFTABLEN, 'ZoFontHeader', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
			end
		end

		local count = #tNames
		if count == 0 then
			if kSformat == 1 then
				nString = pTC(ESOMRL.ASV.aOpts.ttcoloru,L.ESOMRL_NONAMEU)
			elseif kSformat == 2 then 
				nString = pTC(ESOMRL.ASV.aOpts.ttcoloru,L.ESOMRL_NONAMEK)
			elseif kSformat == 3 then
				nString = pTC(ESOMRL.ASV.aOpts.ttcoloru,L.ESOMRL_NONAMEN)
			elseif kSformat == 4 then
				if IsShiftKeyDown() == false then
					nString = pTC(ESOMRL.ASV.aOpts.ttcoloru,L.ESOMRL_NONAMEU)
				else
					nString = pTC(ESOMRL.ASV.aOpts.ttcoloru,L.ESOMRL_NONAMEK)
				end
			end
			control:AddVerticalPadding(-10)
			control:AddLine(nString, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)

		elseif count > 0 then -- overrides ZOS tooltip forced left justification to display names neatly as center wrapped
			for i = 1, count do
				local cname = tNames[i].cname
				local pname = tNames[i].pname

				if i == 1 then
					if count == i then
						control:AddVerticalPadding(-10)
						control:AddLine(cname, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
					else
						if #pname > 35 then
							control:AddVerticalPadding(-10)
							control:AddLine(cname .. ', ', 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
						else
							namestring = cname .. ', '
							cstring = pname .. ', '
						end
					end
				else
					if count == i then
						local tempa = namestring .. cname
						local tempb = cstring .. pname
						if #tempb > 45 then
							control:AddVerticalPadding(-10)
							control:AddLine(namestring, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
							control:AddVerticalPadding(-10)
							control:AddLine(cname, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
						else
							control:AddVerticalPadding(-10)
							control:AddLine(tempa, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
						end
					else
						if #pname > 35 then
							if #namestring > 0 then
								control:AddVerticalPadding(-10)
								control:AddLine(namestring, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
							end
							control:AddVerticalPadding(-10)
							control:AddLine(cname .. ', ', 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
							namestring = ''
							cstring = ''
						else
							local tempa = namestring .. cname .. ', '
							local tempb = cstring .. pname .. ','
							if #tempb > 45 then
								control:AddVerticalPadding(-10)
								control:AddLine(namestring, 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, LEFT, false)
								namestring = cname .. ', '
								cstring = pname .. ', '
							else
								namestring = tempa
								cstring = tempb
							end
						end
					end
				end
			end
		end
	end

	if (isRecipe) then -- Show if selected recipe item is needed for current writ (if any)
		if (not IsItemLinkRecipeKnown(recLink)) then
			if saved == 1 then
				control:AddVerticalPadding(10)
				control:AddLine(pTC("fee854",L.ESOMRL_RTRACK), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				if resId == ESOMRL.CSV.cOpts.cWrit1 or resId == ESOMRL.CSV.cOpts.cWrit2 then
					control:AddLine(pTC("ffff00",L.ESOMRL_NWRITU), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				end
			elseif saved == 0 then
				if resId == ESOMRL.CSV.cOpts.cWrit1 or resId == ESOMRL.CSV.cOpts.cWrit2 then
					control:AddVerticalPadding(10)
					control:AddLine(pTC("ffff00",L.ESOMRL_NWRITU), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				end
			end
		elseif (IsItemLinkRecipeKnown(recLink)) then
			if saved == 2 then
				control:AddVerticalPadding(10)
				control:AddLine(pTC("fee854",L.ESOMRL_RTRACK), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				if resId == ESOMRL.CSV.cOpts.cWrit1 or resId == ESOMRL.CSV.cOpts.cWrit2 then
					control:AddLine(pTC("ffff00",L.ESOMRL_NWRITK), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				end
			elseif saved == 3 then
				if resId == ESOMRL.CSV.cOpts.cWrit1 or resId == ESOMRL.CSV.cOpts.cWrit2 then
					control:AddVerticalPadding(10)
					control:AddLine(pTC("ffff00",L.ESOMRL_NWRITK), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
				end
			end
		end
	else -- Show if selected food item is needed for current writ (if any)
		if resId == ESOMRL.CSV.cOpts.cWrit1 or resId == ESOMRL.CSV.cOpts.cWrit2 then
			if saved == 0 or saved == 1 then
				control:AddVerticalPadding(10)
				control:AddLine(pTC("ffff00",L.ESOMRL_NWRITNC), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
			elseif saved == 2 or saved == 3 then
				control:AddVerticalPadding(10)
				control:AddLine(pTC("ffff00",L.ESOMRL_NWRITCC), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
			end
		end
	end
end

local function AddIngredientTooltipLine(control, itemId) -- Modifies ingredient tooltip with tracked status
	if GetIngredientSavedVar(itemId) == 1 then
		control:AddVerticalPadding(30)
		control:AddLine(pTC("fee854",L.ESOMRL_ITRACK), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
		if writIng[itemId] then
			control:AddLine(pTC("ffff00",L.ESOMRL_NWRIT), 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
		end
	else
		if writIng[itemId] then
			control:AddVerticalPadding(30)
			control:AddLine(pTC("ffff00",L.ESOMRL_NWRIT), 'ZoFontGame', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
		end
	end
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Add inventory tracking status icons based on various options
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function AddTrackingIndicator(control, control2, bagID, slotIndex, itemLink, relativePoint, option)
	local TrackingControl = control:GetNamedChild('InventoryTrackingControl')
	local KnownControl = control:GetNamedChild('InventoryKnownControl')
	local playerID = tostring(GetCurrentCharacterId())
	local tIcons = ESOMRL.ASV.aOpts.inventoryTI
	local itemId = GetItemLinkItemId(itemLink)
	local itemType = GetItemLinkItemType(itemLink)
	local IsGridViewEnabled

	if itemType == ITEMTYPE_RECIPE then -- this should account for situations of multiple recipes teaching the same thing
		if not ProvisioningTable[itemId] and not FurnitureTable[itemId] then
			local rLink = GetItemLinkRecipeResultItemLink(itemLink)
			local nrId = GetItemLinkItemId(rLink)
			if ProvisioningKeys[nrId] then
				itemId = ProvisioningKeys[nrId].ID
			elseif FurnitureKeys[nrId] then
				itemId = FurnitureKeys[nrId].ID
			end
		end
	end

	local function CreateInventoryTrackingControl(parent)
		local tCon = WINDOW_MANAGER:CreateControl(parent:GetName() .. 'InventoryTrackingControl', parent, CT_TEXTURE)
		tCon:SetDrawTier(DT_HIGH)
		tCon:SetHidden(true)
		return tCon
	end
	local function CreateInventoryKnownControl(parent)
		local tCon = WINDOW_MANAGER:CreateControl(parent:GetName() .. 'InventoryKnownControl', parent, CT_TEXTURE)
		tCon:SetDrawTier(DT_HIGH)
		tCon:SetHidden(true)
		return tCon
	end
	local function NoIcons()
		TrackingControl:SetHidden(true)
		KnownControl:SetHidden(true)
	end

	if option == 4 then -- special case for store icon grid view toggle support
		local tControl = control2:GetNamedChild('InventoryTrackingControl')
		local kControl = control2:GetNamedChild('InventoryKnownControl')
		if tControl then tControl:SetHidden(true) end
		if kControl then kControl:SetHidden(true) end
	end

	if not TrackingControl then TrackingControl = CreateInventoryTrackingControl(control) end
	if not KnownControl then KnownControl = CreateInventoryKnownControl(control) end
	TrackingControl:SetHidden(true)
	KnownControl:SetHidden(true)

	-- various conditions where we don't want to display icons so end function
	if not ESOMRL.ASV.aOpts.inventoryicons then return end
	if itemType ~= ITEMTYPE_INGREDIENT and itemType ~= ITEMTYPE_RECIPE and itemType ~= ITEMTYPE_FOOD and itemType ~= ITEMTYPE_DRINK and itemType ~= ITEMTYPE_FURNISHING then NoIcons() return end
	if itemType == ITEMTYPE_INGREDIENT and IngredientTable[itemId] == nil then NoIcons() return end
	if itemType == ITEMTYPE_FOOD and ProvisioningKeys[itemId] == nil then NoIcons() return end
	if itemType == ITEMTYPE_DRINK and ProvisioningKeys[itemId] == nil then NoIcons() return end
	if itemType == ITEMTYPE_FURNISHING and FurnitureKeys[itemId] == nil then NoIcons() return end

	-- functions to manipulate tooltips for icons
	local function AddIconTooltips(control, text)
		control:SetHandler("OnMouseEnter", function(self) ZO_Tooltips_ShowTextTooltip(self, TOP, text) end)
		control:SetHandler("OnMouseExit", function(self) ZO_Tooltips_HideTextTooltip() end)
	end
	local function RemoveIconTooltips(control)
		control:SetHandler("OnMouseEnter", nil)
		control:SetHandler("OnMouseExit", nil)
	end
	local function HandleTooltips(control, text)
		if ESOMRL.ASV.aOpts.inventoryIT then
			control:SetMouseEnabled(true)
			AddIconTooltips(control, text)
		else
			control:SetMouseEnabled(false)
			RemoveIconTooltips(control)
		end
	end
	local function SetInventoryIcon(control, size, icon, icontext)
		control:SetDimensions(size, size)
		control:SetTexture(icon)
		control:SetHidden(false)
		HandleTooltips(control, icontext)
	end

	-- check for inventory grid view
	if ( control.isGrid or ( control:GetWidth() - control:GetHeight() < 5 ) ) then
		IsGridViewEnabled = true else IsGridViewEnabled = false
	end

	-- handle positioning icons from saved variables
	local controlName = WINDOW_MANAGER:GetControlByName(control:GetName() .. 'Name')
	TrackingControl:ClearAnchors()
	if option == 2 then
		TrackingControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.gstoreiconoffset, 9)
		KnownControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.gstoreiconoffset, 9)
	elseif option == 3 then
		TrackingControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.glistingiconoffset, 0)
		KnownControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.glistingiconoffset, 0)
	elseif option == 1 then
		if IsGridViewEnabled then
			TrackingControl:SetAnchor(LEFT, parent, BOTTOMLEFT, 4, -12)
			KnownControl:SetAnchor(LEFT, parent, BOTTOMLEFT, 4, -12)
		else
			TrackingControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.bagiconoffset)
			KnownControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.bagiconoffset)
		end
	elseif option == 4 then
		if IsGridViewEnabled then
			TrackingControl:SetAnchor(LEFT, parent, BOTTOMLEFT, 4, -12)
			KnownControl:SetAnchor(LEFT, parent, BOTTOMLEFT, 4, -12)
		else
			TrackingControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.storeiconoffset)
			KnownControl:SetAnchor(LEFT, controlName, relativePoint, ESOMRL.ASV.aOpts.storeiconoffset)
		end
	end

	-- show icons based on type and saved variables
	if itemType == ITEMTYPE_RECIPE then
		local inventoryCK = ESOMRL.ASV.aOpts.inventoryCK -- show current known
		local inventoryCU = ESOMRL.ASV.aOpts.inventoryCU -- show current unknown
		local tchartK = ESOMRL.ASV.aOpts.tchartK -- show tracking char known
		local tchart = ESOMRL.ASV.aOpts.tchart -- show tracking char unknown
		local saved
		local resLink
		local nrId
		local tChar
		local knownDB
		local iString

		if ProvisioningTable[itemId] ~= nil then
			resLink = ProvisioningTable[itemId].item
			nrId = GetItemLinkItemId(resLink)
			saved = GetRecipeSavedVar(nrId, 1)
			tChar = ESOMRL.ASV.aOpts.foodtrackingchar
			knownDB = ESOMRL.ASV.pRecipeKnown
		elseif FurnitureTable[itemId] ~= nil then
			resLink = FurnitureTable[itemId].item
			nrId = GetItemLinkItemId(resLink)
			saved = GetRecipeSavedVar(nrId, 100)
			tChar = ESOMRL.ASV.aOpts.furntrackingchar
			knownDB = ESOMRL.ASV.fRecipeKnown
		else
			return
		end

		-- first check and set known status icon
		if inventoryCK and (tchart and tchartK) then -- show current character known AND tracking character known
			if pCO(knownDB[nrId].IDs, playerID) and pCO(knownDB[nrId].IDs, tChar) then -- known by current, known by tracking 
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_igvct.dds' or '/MasterRecipeList/bin/textures/trackaknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_TK..'\n'..L.ESOMRL_ITT_CK)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_ct.dds' or '/MasterRecipeList/bin/textures/trackaknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_TK..'\n'..L.ESOMRL_ITT_CK)
				end
			elseif pCO(knownDB[nrId].IDs, playerID) and not pCO(knownDB[nrId].IDs, tChar) then -- known by current, unknown by tracking
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_igvc.dds' or '/MasterRecipeList/bin/textures/trackaknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_CK)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_c.dds' or '/MasterRecipeList/bin/textures/trackaknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_CK)
				end
			elseif not pCO(knownDB[nrId].IDs, playerID) and pCO(knownDB[nrId].IDs, tChar) then -- unknown by current, known by tracking
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_igvt.dds' or '/MasterRecipeList/bin/textures/trackaknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_TK)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_t.dds' or '/MasterRecipeList/bin/textures/trackaknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_TK)
				end
			end
		elseif inventoryCK and not (tchart and tchartK) then -- show current character known NOT tracking character known
			if pCO(knownDB[nrId].IDs, playerID) then -- known by current
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_igvc.dds' or '/MasterRecipeList/bin/textures/trackaknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_CK)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_c.dds' or '/MasterRecipeList/bin/textures/trackaknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_CK)
				end
			end
		elseif not inventoryCK and (tchart and tchartK) then -- show tracking character known NOT current character known
			if pCO(knownDB[nrId].IDs, tChar) then -- known by tracking
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_igvt.dds' or '/MasterRecipeList/bin/textures/trackaknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_TK)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackaknown_t.dds' or '/MasterRecipeList/bin/textures/trackaknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_TK)
				end
			end
		end

		-- then check and set unknown status icon
		if inventoryCU and tchart then -- show current character unknown AND tracking character unknown
			if pCO(knownDB[nrId].IDs, playerID) == false and pCO(knownDB[nrId].IDs, tChar) == false then -- unknown by current, unknown by tracking 
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_igvct.dds' or '/MasterRecipeList/bin/textures/trackcknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CU)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_ct.dds' or '/MasterRecipeList/bin/textures/trackcknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CU)
				end
			elseif not pCO(knownDB[nrId].IDs, playerID) and pCO(knownDB[nrId].IDs, tChar) then -- unknown by current, known by tracking 
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_igvc.dds' or '/MasterRecipeList/bin/textures/trackcknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, (tchartK) and L.ESOMRL_ITT_CU..'\n'..L.ESOMRL_ITT_TK or L.ESOMRL_ITT_CU)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_c.dds' or '/MasterRecipeList/bin/textures/trackcknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, (tchartK) and L.ESOMRL_ITT_CU..'\n'..L.ESOMRL_ITT_TK or L.ESOMRL_ITT_CU)
				end
			elseif pCO(knownDB[nrId].IDs, playerID) and not pCO(knownDB[nrId].IDs, tChar) then -- unknown by tracking, known by current
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_igvt.dds' or '/MasterRecipeList/bin/textures/trackcknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, (inventoryCK) and L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CK or L.ESOMRL_ITT_TU)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_t.dds' or '/MasterRecipeList/bin/textures/trackcknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, (inventoryCK) and L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CK or L.ESOMRL_ITT_TU)
				end
			end
		elseif inventoryCU and not tchart then -- show current character unknown NOT tracking character unknown
			if not pCO(knownDB[nrId].IDs, playerID) then -- unknown by current
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_igvc.dds' or '/MasterRecipeList/bin/textures/trackcknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, (tchartK) and L.ESOMRL_ITT_CU..'\n'..L.ESOMRL_ITT_TK or L.ESOMRL_ITT_CU)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_c.dds' or '/MasterRecipeList/bin/textures/trackcknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, (tchartK) and L.ESOMRL_ITT_CU..'\n'..L.ESOMRL_ITT_TK or L.ESOMRL_ITT_CU)
				end
			end
		elseif not inventoryCU and tchart then -- show tracking character unknown NOT current character unknown
			if not pCO(knownDB[nrId].IDs, tChar) then -- unknown by tracking 
				if IsGridViewEnabled then
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_igvt.dds' or '/MasterRecipeList/bin/textures/trackcknown_igv.dds'
					SetInventoryIcon(KnownControl, 14, iString, (inventoryCK) and L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CK or L.ESOMRL_ITT_TU)
				else
					iString = (tIcons) and '/MasterRecipeList/bin/textures/trackcknown_t.dds' or '/MasterRecipeList/bin/textures/trackcknown.dds'
					SetInventoryIcon(KnownControl, 20, iString, (inventoryCK) and L.ESOMRL_ITT_TU..'\n'..L.ESOMRL_ITT_CK or L.ESOMRL_ITT_TU)
				end
			end
		end

		-- then check and set tracking status
		if ESOMRL.ASV.aOpts.inventoryT then
			if (saved == 1) or (saved == 2) then
				if KnownControl then KnownControl:SetHidden(true) end
				if option == 2 or option == 3 then
					SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/tracking.dds', L.ESOMRL_ITTMRLT)
				else
					if IsGridViewEnabled then
						SetInventoryIcon(TrackingControl, 14, '/MasterRecipeList/bin/textures/tracking_igv.dds', L.ESOMRL_ITTMRLT)
					else
						SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/tracking.dds', L.ESOMRL_ITTMRLT)
					end
				end
			end
		end

		-- finally check and set writ status
		if ESOMRL.ASV.aOpts.inventoryW then
			if resID == ESOMRL.CSV.cOpts.cWrit1 or resID == ESOMRL.CSV.cOpts.cWrit2 then
				if KnownControl then KnownControl:SetHidden(true) end
				if IsGridViewEnabled then
					SetInventoryIcon(TrackingControl, 14, '/MasterRecipeList/bin/textures/trackingw_igv.dds', L.ESOMRL_ITTWRITR)
				else
					SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/trackingw.dds', L.ESOMRL_ITTWRITR)
				end
			end 
		end
	elseif itemType == ITEMTYPE_INGREDIENT then
		if ESOMRL.ASV.aOpts.inventoryT then
			local saved = GetIngredientSavedVar(itemId)
			if KnownControl then KnownControl:SetHidden(true) end
			if saved ~= 0 then
				if option == 2 or option == 3 then
					SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/tracking.dds', L.ESOMRL_ITTMRLT)
				else
					if IsGridViewEnabled then
						SetInventoryIcon(TrackingControl, 14, '/MasterRecipeList/bin/textures/tracking_igv.dds', L.ESOMRL_ITTMRLT)
					else
						SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/tracking.dds', L.ESOMRL_ITTMRLT)
					end
				end
			end
		end
		if ESOMRL.ASV.aOpts.inventoryW then
			if writIng[itemId] then
				if IsGridViewEnabled then
					SetInventoryIcon(TrackingControl, 14, '/MasterRecipeList/bin/textures/trackingw_igv.dds', L.ESOMRL_ITTWRITC)
				else
					SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/trackingw.dds', L.ESOMRL_ITTWRITC)
				end
			end
		end
	elseif itemType == ITEMTYPE_FOOD or itemType == ITEMTYPE_DRINK then
		if KnownControl then KnownControl:SetHidden(true) end
		if itemId == ESOMRL.CSV.cOpts.cWrit1 or itemId == ESOMRL.CSV.cOpts.cWrit2 then
			if IsGridViewEnabled then
				SetInventoryIcon(TrackingControl, 14, '/MasterRecipeList/bin/textures/trackingw_igv.dds', L.ESOMRL_ITTWRITI)
			else
				SetInventoryIcon(TrackingControl, 20, '/MasterRecipeList/bin/textures/trackingw.dds', L.ESOMRL_ITTWRITI)
			end
		end
	end

	if FCOIS and bagID and option < 4 then -- compatibility for FCO ItemSaver
		local function HandleFCOIS()
			if itemType == ITEMTYPE_INGREDIENT and IngredientTable[itemId] ~= nil then
				if ESOMRL.ASV.aOpts.fcoitemsaverT then
					if GetIngredientSavedVar(itemId) ~= 0 then
						FCOIS.MarkItem(bagID, slotIndex, 1, true, true)
					end
				end
			elseif itemType == ITEMTYPE_RECIPE then
				local saved
				local sDB
				local tChar
				local resLink
				local nrId

				if ProvisioningTable[itemId] ~= nil then
					resLink = ProvisioningTable[itemId].item
					nrId = ProvisioningTable[itemId].nrId
					saved = GetRecipeSavedVar(nrId, 1)
					sDB = ESOMRL.ASV.pRecipeKnown
					tChar = ESOMRL.ASV.aOpts.foodtrackingchar
				elseif FurnitureTable[itemId] ~= nil then
					resLink = FurnitureTable[itemId].item
					nrId = FurnitureTable[itemId].nrId
					saved = GetRecipeSavedVar(nrId, 100)
					sDB = ESOMRL.ASV.fRecipeKnown
					tChar = ESOMRL.ASV.aOpts.furntrackingchar
				else
					return
				end

				if ESOMRL.ASV.aOpts.fcoitemsaverU and ESOMRL.ASV.aOpts.tchart then
					if tChar ~= nil and tChar ~= "" then
						if sDB[nrId] then
							if not pCO(sDB[nrId].IDs, tChar) then
								FCOIS.MarkItem(bagID, slotIndex, 1, true, true)
							end
						end
					end
				end

				if ESOMRL.CSV.cOpts.fcoitemsaverCO then
					if not pCO(sDB[nrId].IDs, tostring(GetCurrentCharacterId())) then
						FCOIS.MarkItem(bagID, slotIndex, 1, true, true)
					end
				end

				if ESOMRL.ASV.aOpts.fcoitemsaverT then
					if (saved == 1) or (saved == 2) then
						FCOIS.MarkItem(bagID, slotIndex, FCOIS_CON_ICON_LOCK, true, true)
					end
				end
			end
		end
		if IsInGamepadPreferredMode() then
			if FCOIS.checkIfADCUIAndIsNotUsingGamepadMode() then
				HandleFCOIS()
			end
		else
			HandleFCOIS()
		end
	end
end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Modify cooking station behavior and handle coloring categories and adding optional stat and writ tracking icons
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function RefreshStationControl() -- Delay refreshing station list on exit to avoid errors
	if GetCraftingInteractionType() == 0 then
		StationControl:RefreshRecipeList()
	end
end

local function ClearStationSelection() -- Reset station navigation to close all open categories
	if (not IsInGamepadPreferredMode()) then
		if StationControl then
			local selectedNode = StationControl.recipeTree.selectedNode
			if selectedNode then selectedNode = nil end
			StationControl.resultTooltip:SetHidden(true)
			stationSelect = ""
			if StationControl.ingredientRows then
				for ingredientIndex, ingredientSlot in ipairs(StationControl.ingredientRows) do
					ingredientSlot:ClearItem()
				end
			end
			zo_callLater(function() RefreshStationControl() end, 1000)
		end
	end
end

local function UpdateStationTooltip() -- Maintains the current show/hide station tooltip state
	local resultTooltip = (StationControl ~= nil and StationControl.resultTooltip ~= nil) and StationControl.resultTooltip or nil

	if resultTooltip ~= nil then
		local left = ESOMRL.ASV.aOpts.sttx[stationMode]
		local top = ESOMRL.ASV.aOpts.stty[stationMode]
		resultTooltip:SetMovable(true)
		resultTooltip:SetHandler('OnMoveStop', function() MoveStopSet(2, resultTooltip) end)
	
		if ESOMRL.ASV.aOpts.sttshow == 0 then
			resultTooltip:SetClampedToScreen(false)
			resultTooltip:ClearAnchors()
			resultTooltip:SetAnchor(TOPLEFT, GuiRoot, BOTTOMRIGHT, 50, 50)
			return
		end
		if not StationControl.noRecipesLabel:IsHidden() then
			resultTooltip:SetClampedToScreen(false)
			resultTooltip:ClearAnchors()
			resultTooltip:SetAnchor(TOPLEFT, GuiRoot, BOTTOMRIGHT, 50, 50)
			return
		end
	
		resultTooltip:SetClampedToScreen(true)
		resultTooltip:ClearAnchors()
	
		if left ~=0 and right ~= 0 then
			resultTooltip:SetAnchor(TOPLEFT, GuiRoot, TOPLEFT, left, top)
		else -- default position
			resultTooltip:SetAnchor(BOTTOM, ZO_ProvisionerTopLevel, BOTTOM, 0, -245)
		end
	
		if itemId == ESOMRL.CSV.cOpts.cWrit1 or itemId == ESOMRL.CSV.cOpts.cWrit2 then
			resultTooltip:AddVerticalPadding(10)
			resultTooltip:AddLine(pTC("ffff00",L.ESOMRL_NWRIT), 'ZoFontHeader2', 1, 1, 1, CENTER, MODIFY_TEXT_TYPE_NONE, CENTER, false)
		end
	end
end

local function ToggleStationTooltips(option) -- Handles turning cooking station item tooltips on and off
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
		if ESOMRL.ASV.aOpts.sttshow == 1 then
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTHIDE)
		else
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTSHOW)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if ESOMRL.ASV.aOpts.sttshow == 1 then
			ESOMRL.ASV.aOpts.sttshow = 0
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTSHOW)
		else
			ESOMRL.ASV.aOpts.sttshow = 1
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_LTTHIDE)
		end
		UpdateStationTooltip()
	end
end

local function HighlightTracked(option) -- Toggle highlighting tracked items at the cooking station
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
		if ESOMRL.ASV.aOpts.stmarked == 1 then
			SetTooltipText(InformationTooltip, L.ESOMRL_STRACKN)
		else
			SetTooltipText(InformationTooltip, L.ESOMRL_STRACKY)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if ESOMRL.ASV.aOpts.stmarked == 1 then
			ESOMRL.ASV.aOpts.stmarked = 0
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_STRACKY)
		else
			ESOMRL.ASV.aOpts.stmarked = 1
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_STRACKN)
		end
		if StationControl then
			zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
		end
	end
end

local function SetStationIcons(control, list, headerText, hasWrit, hasTrack) -- Add stat and tracking indicators if enabled
	local recipeListName, numRecipes, upIcon, downIcon, overIcon, disabledIcon, createSound = GetRecipeListInfo(list)
	local recipeListName = string.upper(recipeListName)
	local function markTrack() control.text:SetText(control.text:GetText() .. DB.StationIcons[9]) end
	local function markWrit() control.text:SetText(control.text:GetText() .. DB.StationIcons[8]) end
	if list == 1 or list == 8 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[1]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list== 2 or list == 9 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[2]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 3 or list == 10 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[3]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 4 or list == 11 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[4]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 5 or list == 12 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[5]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 6 or list == 13 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[6]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 7 or list == 14 then
		if recipeListName == headerText then
			if ESOMRL.ASV.aOpts.stationstats then control.text:SetText(headerText .. DB.StationIcons[7]) else control.text:SetText(headerText) end
			if hasTrack then markTrack() end
			if hasWrit then markWrit() end
		end
	elseif list == 15 or list == 16 then
		if recipeListName == headerText then
			control.text:SetText(headerText)
			if hasTrack then markTrack() end
		end
	else -- handles all furniture categories
		if recipeListName == headerText then
			control.text:SetText(headerText)
			if hasTrack then markTrack() end
		end
	end
end

local function SetStationColors(control, option, recipeListIndex, mode) -- Colorize cooking station recipe headers by quality
	local headerText = control.text:GetText():gsub("  |.*",''):gsub(" |.*",'')
	local function setWritColor(recipeListName, header, cv, hasWrit, hasTrack)
		local r, g, b
		if cv == 1 then
			if recipeListName == headerText then
				if DB.StationControls[header].c == nil then DB.StationControls[header].c = control end
				if option == 1 then r, g, b = 0.176, 0.773, 0.055 else r, g, b = 0.314, 0.91, 0.192 end
				control.text:SetColor(r,g,b)
				SetStationIcons(control, header, headerText, hasWrit, hasTrack)
			end
		elseif cv == 2 then
			if recipeListName == headerText then
				if DB.StationControls[header].c == nil then DB.StationControls[header].c = control end
				if option == 1 then r, g, b = 0.227, 0.573, 1 else r, g, b = 0.365, 0.71, 1 end
				control.text:SetColor(r,g,b)
				SetStationIcons(control, header, headerText, hasWrit, hasTrack)
			end
		elseif cv == 3 then
			if recipeListName == headerText then
				if DB.StationControls[header].c == nil then DB.StationControls[header].c = control end
				if option == 1 then r, g, b = 0.627, 0.18, 0.969 else r, g, b = 0.765, 0.318, 1 end
				control.text:SetColor(r,g,b)
				SetStationIcons(control, header, headerText, hasWrit, hasTrack)
			end
		elseif cv == 4 then
			if recipeListName == headerText then
				if DB.StationControls[header].c == nil then DB.StationControls[header].c = control end
				if option == 1 then r, g, b = 0.933, 0.792, 0.165 else r, g, b = 1, 0.929, 0.302 end
				control.text:SetColor(r,g,b)
				SetStationIcons(control, header, headerText, hasWrit, hasTrack)
			end
		end
	end

	if mode == 1 then -- above code only needed for cooking station as furniture writs aren't supported
		local sCheck = DB.StationChecking
		if recipeListIndex ~= nil then
			if sCheck[recipeListIndex] then
				local countWrit = false
				local countTrack = false
				local recipeListName, _, _, _, _, _, _ = GetRecipeListInfo(recipeListIndex)
				recipeListName = string.upper(recipeListName)
				local cv = sCheck[recipeListIndex].cv
				local tr = sCheck[recipeListIndex].tr
				for i = 1, #tr do
					if tr[i].writ == 1 then countWrit = true break end
				end
				for i = 1, #tr do
					if tr[i].track == 1 then countTrack = true break end
				end
				setWritColor(recipeListName, recipeListIndex, cv, countWrit, countTrack)
			end
		else
			for c = 1, #sCheck do
				local countWrit = false
				local countTrack = false
				local recipeListName, _, _, _, _, _, _ = GetRecipeListInfo(c)
				recipeListName = string.upper(recipeListName)
				local cv = sCheck[c].cv
				local tr = sCheck[c].tr
				for i = 1, #tr do
					if tr[i].writ == 1 then countWrit = true break end
				end
				for i = 1, #tr do
					if tr[i].track == 1 then countTrack = true break end
				end
				setWritColor(recipeListName, c, cv, countWrit, countTrack)
			end
		end
	elseif mode == 2 then
		if DB.StationControls[recipeListIndex].c == nil then DB.StationControls[recipeListIndex].c = control end
		local recipeListName, _, _, _, _, _, _ = GetRecipeListInfo(recipeListIndex)
		recipeListName = string.upper(recipeListName)
		local countTrack = false
		for k, v in pairs(FurnitureKeys) do
			if v.rInd == recipeListIndex and v.track == 1 then countTrack = true break end
		end
		SetStationIcons(control, recipeListIndex, headerText, false, countTrack)
	end
end

local function SetWritColor(self, mode) -- Sets category mark and item color for active writ items if enabled (cooking only)
	local recipeListIndex = self.data.recipeListIndex
	local recipeIndex = self.data.recipeIndex
	local itemLink = GetRecipeResultItemLink(recipeListIndex, recipeIndex)
	local itemId = GetItemLinkItemId(itemLink)

	local linkDB = (mode == 1) and ProvisioningKeys or FurnitureKeys
	if linkDB[itemId] == nil then
		if not self.enabled then
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_DISABLED)
		elseif self.selected then
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_SELECTED)
		elseif self.mouseover then
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT)
		elseif self.meetsLevelReq and self.meetsQualityReq then
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL)
		end
		return ZO_ERROR_COLOR:UnpackRGBA()
	end

	if mode == 1 then
		local saved = GetRecipeSavedVar(itemId, 1)
		local control = DB.StationControls[recipeListIndex].c
		local dbRef = DB.StationChecking[recipeListIndex].tr
		local nsId = ProvisioningKeys[itemId].ID
		local sub

		for k, v in pairs(dbRef) do if v.ID == nsId then sub = k end end

		dbRef[sub].writ = 0
		dbRef[sub].track = 0

		if itemId == ESOMRL.CSV.cOpts.cWrit1 or itemId == ESOMRL.CSV.cOpts.cWrit2 then
			dbRef[sub].writ = 1

			-- save the recipeIndex of un-crafted active writ requirements
			writList[recipeListIndex].writ = recipeIndex

			SetStationColors(control, 1, recipeListIndex, 1)
			if not self.enabled then
				return 0.878,0.878,0.298
			elseif self.mouseover then
				return 1,1,0.394
			else
				return 1,1,0
			end
		elseif ( ( (saved == 1) or (saved == 2) ) and ( ESOMRL.ASV.aOpts.stmarked == 1 ) ) then
			dbRef[sub].track = 1
			SetStationColors(control, 1, recipeListIndex, 1)
			if not self.enabled then
				return 0,0.82,0.91
			elseif self.selected or self.mouseover then
				return 0.2,1,1
			else
				return 0,0.91,1
			end
		elseif not self.enabled then
			SetStationColors(control, 1, recipeListIndex, 1)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_DISABLED)
		elseif self.selected then
			SetStationColors(control, 1, recipeListIndex, 1)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_SELECTED)
		elseif self.mouseover then
			SetStationColors(control, 1, recipeListIndex, 1)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT)
		elseif self.meetsLevelReq and self.meetsQualityReq then
			SetStationColors(control, 1, recipeListIndex, 1)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL)
		end
		return ZO_ERROR_COLOR:UnpackRGBA()
	elseif mode == 2 then
		local saved = GetRecipeSavedVar(itemId, 100)
		local control = DB.StationControls[recipeListIndex].c
		FurnitureKeys[itemId].track = 0

		if ( ( (saved == 1) or (saved == 2) ) and ( ESOMRL.ASV.aOpts.stmarked == 1 ) ) then
			FurnitureKeys[itemId].track = 1
			SetStationColors(control, 1, recipeListIndex, 2)
			if not self.enabled then
				return 0,0.82,0.91
			elseif self.selected or self.mouseover then
				return 0.2,1,1
			else
				return 0,0.91,1
			end
		elseif not self.enabled then
			SetStationColors(control, 1, recipeListIndex, 2)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_DISABLED)
		elseif self.selected then
			SetStationColors(control, 1, recipeListIndex, 2)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_SELECTED)
		elseif self.mouseover then
			SetStationColors(control, 1, recipeListIndex, 2)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT)
		elseif self.meetsLevelReq and self.meetsQualityReq then
			SetStationColors(control, 1, recipeListIndex, 2)
			return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL)
		end
		return ZO_ERROR_COLOR:UnpackRGBA()
	end
end

local function StationNavBarMoved()
	ESOMRL.ASV.aOpts.stationCustomX = ESOMRLStationButton:GetLeft()
	ESOMRL.ASV.aOpts.stationCustomY = ESOMRLStationButton:GetTop()
end

local function ShowStationControls(control, x, y) -- Detects cooking/furniture crafting mode and enables station controls

	if ESOMRL.ASV.aOpts.opControls == false and GetCraftingInteractionType() ~= CRAFTING_TYPE_PROVISIONING then return end -- option to only show MRL controls at provisioning station

	ESOMRLStationTitle:SetHidden(true)
	ESOMRLResetStationNavigation:SetHidden(false)
	ESOMRLFindInMRLButton:SetHidden(false)
	ESOMRLStationTooltipButton:SetHidden(false)
	ESOMRLStationTrackingButton:SetHidden(false)

	local sx = ESOMRL.ASV.aOpts.stationCustomX
	local sy = ESOMRL.ASV.aOpts.stationCustomY

	if sx + sy ~= 0 then
		ESOMRL:ClearAnchors() ESOMRL:SetAnchor(TOPLEFT, GuiRoot, TOPLEFT, sx, sy) ESOMRL:SetHidden(false)
	else
		ESOMRL:ClearAnchors() ESOMRL:SetAnchor(BOTTOMRIGHT, control, TOPRIGHT, x, y) ESOMRL:SetHidden(false)
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Initialize the scrollable list of recipes and handle various category and search functions
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function SetListItem(control, data) -- Hook the ScrollList data table
	local listitemtext = control:GetNamedChild( 'Name' )
	listitemtext:SetText( data.RecipeName )
end

local function ResetFurnitureNav(set) -- Tracks the current furniture list for nav icon setup
	for i = 1, 35 do
		if i ~= set then
			DB.FurnitureNav[i].active = false
			GetControl(DB.FurnitureNav[i].c1):SetAlpha(1)
			GetControl(DB.FurnitureNav[i].c2):SetAlpha(0)
		end
	end
	DB.FurnitureNav[set].active = true
	GetControl(DB.FurnitureNav[set].c1):SetAlpha(0)
	GetControl(DB.FurnitureNav[set].c2):SetAlpha(1)
end

local function FurnitureNavigation(val) -- Keeps the furniture navigation triangle active for current list
	if DB.FurnitureNav[val].active == false then
		GetControl(DB.FurnitureNav[val].c1):SetAlpha(1)
		GetControl(DB.FurnitureNav[val].c2):SetAlpha(0)
	end
end

local function ClearRecipeSearchList(datalist) -- Clears the current scroll list and search tables
	for k,v in pairs(datalist) do datalist[k] = nil end
	for k,v in pairs(searchTable) do searchTable[k] = nil end
	ZO_ScrollList_Clear(ESOMRL_MainFrameListFrameList)
	ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
end

local function TextSearch(refresh) -- Populate recipe list based on text search
	local datalist = ZO_ScrollList_GetDataList(ESOMRL_MainFrameListFrameList)
	local searchtext
	local known
	local row = 0

	if editText ~= 2 then
		openTab = 50
		if editText == 1 or refresh == 1 then
			ZO_ScrollList_Clear(ESOMRL_MainFrameListFrameList) 
			if refresh == 1 then searchtext = LowerSpaceSpecial(textInput) else searchtext = LowerSpaceSpecial(ESOMRL_MainFrameListFrameSearchBox:GetText()) end
			if searchtext == "" then
				for k,v in pairs(datalist) do datalist[k] = nil end
				ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
			else
				for k,v in pairs(searchTable) do searchTable[k] = nil end
				if refresh ~= 1 then searchtext = LowerSpaceSpecial(searchtext) end

				if setMode == 1 then -- searching the cooking lists
					local tCrossCheck = {}
					local tSearchTable = {}
					local tDatalist = {}
					local oTable = {}
					local LS = {}
					local LSnames = {}
					local CP = {}
					local CPnames = {}
					local AL = {}
					local ALnames = {}

					local kOnly, uOnly = KnownUnknownDB(ProvisioningTable)
					local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

					for i = 1, #opTable do
						local tData = opTable[i].data
						local resLink = tData.item
						local nrId = GetItemLinkItemId(resLink)
						local name = LowerSpaceSpecial(GetItemLinkName(resLink))
						local color = dQC[GetItemLinkQuality(resLink)]
						local tID = opTable[i].key
						local fLevel = tData.level
						local _, _, _, _, hasScaling, minLevel, maxLevel, isChampionPoints, _ = GetItemLinkOnUseAbilityInfo(resLink)
						local sText = zo_strlower(LangFormat(searchtext))

						local function CheckRange(st) -- special handling for number or "cp"+number entry for searching level ranges
							local sText = zo_strlower(LangFormat(st))
							local cRange, _ = sText:gsub("%D",'')
							local tRange = tonumber(cRange)
							if hasScaling == false then
								if sText == "cp1" then
									return true
								else
									return false
								end
							else
								if (string.find(sText,"cp%d") ~= nil) then
									if isChampionPoints and tRange ~= nil and tRange >= minLevel and tRange <= maxLevel then
										return true
									else
										return false
									end
								elseif (string.find(sText,"%d") ~= nil) then
									if not isChampionPoints and tRange ~= nil and tRange >= minLevel and tRange <= maxLevel then
										return true
									else
										return false
									end
								else
									return false
								end
							end
						end

						if (string.find(name,searchtext) ~= nil) or CheckRange(searchtext) then -- pre-build match tables for sorting
							local saved = GetRecipeSavedVar(nrId, 1)
							local writSet = 0
							if IsItemLinkRecipeKnown(ProvisioningTable[tID].link) == false then
								if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
									writSet = 1
									if saved == 1 then known = DB.IconStrings[6] elseif saved == 0 then known = DB.IconStrings[5] end
								else
									writSet = 0
									if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
								end
							else
								if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
									writSet = 1
									if saved == 2 then known = DB.IconStrings[6] elseif saved == 3 then known = DB.IconStrings[5] end
								else
									writSet = 0
									if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
								end
							end
							row = row + 1
							local linkname = GetItemLinkName(ProvisioningTable[tID].item)
							local namestring = LangFormat(linkname)
							tCrossCheck[row] = {item = tData.item, row = row}
							tSearchTable[row] = { ID = tID, writ = writSet, text = known..pTC(color,namestring)..pTC("ffffff",' '..fLevel), name = linkname}
							tDatalist[row] = known..pTC(color,namestring)..pTC("ffffff",' '..fLevel)
						end
					end

					for k, v in pairs(tCrossCheck) do -- sort food/drink by level range, then CP level range, then special "Any Level" items, otherwise sort alphabetically
						local _, _, _, _, hasScaling, minLevel, maxLevel, isChampionPoints, _ = GetItemLinkOnUseAbilityInfo(v.item)
						local iName = LangFormat(GetItemLinkName(v.item))
						local iTag = tostring(tSearchTable[v.row].ID)
						local fMin = string.format("%02.0f", tostring(minLevel)) -- concatenation to sort by level range

						if not hasScaling then
							AL[#AL + 1] = iName..iTag
							ALnames[iName..iTag] = v
						else
							if not isChampionPoints then
								LS[#LS + 1] = fMin..iName..iTag
								LSnames[fMin..iName..iTag] = v
							else
								CP[#CP + 1] = fMin..iName..iTag
								CPnames[fMin..iName..iTag] = v
							end
						end
					end
					table.sort(LS)
					table.sort(CP)
					table.sort(AL)

					for i = 1, #LS do
						oTable[#oTable + 1] = LSnames[LS[i]]
					end
					for i = 1, #CP do
						oTable[#oTable + 1] = CPnames[CP[i]]
					end
					for i = 1, #AL do
						oTable[#oTable + 1] = ALnames[AL[i]]
					end

					for k, v in ipairs(oTable) do
						local sData = tSearchTable[v.row]
						local rData = tDatalist[v.row]
						searchTable[k] = sData
						datalist[k] = ZO_ScrollList_CreateDataEntry( 1, 
						{
							RecipeName = rData,
						}
						)
					end
				else -- sort furniture alphabetically and by quality in groups (Alchemy, Blacksmithing, etc.)
					local tCrossCheck = {}
					local tSearchTable = {}
					local tDatalist = {}
					local oTable = {}
					local AL = {}
					local ALnames = {}
					local BL = {}
					local BLnames = {}
					local CL = {}
					local CLnames = {}
					local EN = {}
					local ENnames = {}
					local PR = {}
					local PRnames = {}
					local WD = {}
					local WDnames = {}
					local JC = {}
					local JCnames = {}

					local kOnly, uOnly = KnownUnknownDB(FurnitureTable)
					local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

					for i = 1, #opTable do
						local tData = opTable[i].data
						local resLink = tData.item
						local nrId = GetItemLinkItemId(resLink)
						local name = LowerSpaceSpecial(GetItemLinkName(resLink))
						local color = dQC[GetItemLinkQuality(resLink)]
						local tID = opTable[i].key

						local preview -- optionally show preview icon for recipes that can be right-click 3d-previewed
					--	if PREVIEW:CanPreviewItemLink(tData.link) and ESOMRL.ASV.aOpts.previewicon then
					--		preview = ' |t16:16:/esoui/art/cursors/cursor_preview.dds|t'
					--	else
							preview = ''
					--	end

						if string.find(name,searchtext) ~= nil then
							local saved = GetRecipeSavedVar(nrId, 100)
							if IsItemLinkRecipeKnown(tData.link) == false then
								if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
							else
								if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
							end
							row = row + 1
							local catstring = " \("..DB.SkillTypes[GetItemLinkRecipeCraftingSkillType(tData.link)].."\)"
							local linkname = GetItemLinkName(resLink)
							local namestring = LangFormat(linkname)

							tCrossCheck[row] = {item = resLink, link = tData.link, row = row}
							tSearchTable[row] = { ID = tID, text = known..pTC(color,namestring)..catstring..preview, name = linkname, link = resLink}
							tDatalist[row] = known..pTC(color,namestring)..catstring..preview
						end
					end

					for k, v in pairs(tCrossCheck) do
						local cType = GetItemLinkRecipeCraftingSkillType(v.link)
						local iName = LangFormat(GetItemLinkName(v.item))
						local iTag = tostring(tSearchTable[v.row].ID)
						local iQlty = tostring(GetItemLinkQuality(v.item))

						if cType == 1 then -- Blacksmithing
							BL[#BL + 1] = iQlty..iName..iTag
							BLnames[iQlty..iName..iTag] = v
						elseif cType == 2 then -- Clothing
							CL[#CL + 1] = iQlty..iName..iTag
							CLnames[iQlty..iName..iTag] = v
						elseif cType == 3 then -- Enchanting
							EN[#EN + 1] = iQlty..iName..iTag
							ENnames[iQlty..iName..iTag] = v
						elseif cType == 4 then -- Alchemy
							AL[#AL + 1] = iQlty..iName..iTag
							ALnames[iQlty..iName..iTag] = v
						elseif cType == 5 then -- Provisioning
							PR[#PR + 1] = iQlty..iName..iTag
							PRnames[iQlty..iName..iTag] = v
						elseif cType == 6 then -- Woodworking
							WD[#WD + 1] = iQlty..iName..iTag
							WDnames[iQlty..iName..iTag] = v
						elseif cType == 7 then -- Jewelry Crafting
							JC[#JC + 1] = iQlty..iName..iTag
							JCnames[iQlty..iName..iTag] = v
						end
					end

					table.sort(BL)
					table.sort(CL)
					table.sort(EN)
					table.sort(AL)
					table.sort(PR)
					table.sort(WD)
					table.sort(JC)

					for i = 1, #BL do
						oTable[#oTable + 1] = BLnames[BL[i]]
					end
					for i = 1, #CL do
						oTable[#oTable + 1] = CLnames[CL[i]]
					end
					for i = 1, #EN do
						oTable[#oTable + 1] = ENnames[EN[i]]
					end
					for i = 1, #AL do
						oTable[#oTable + 1] = ALnames[AL[i]]
					end
					for i = 1, #PR do
						oTable[#oTable + 1] = PRnames[PR[i]]
					end
					for i = 1, #WD do
						oTable[#oTable + 1] = WDnames[WD[i]]
					end
					for i = 1, #JC do
						oTable[#oTable + 1] = JCnames[JC[i]]
					end

					for k, v in ipairs(oTable) do
						local sData = tSearchTable[v.row]
						local rData = tDatalist[v.row]

						searchTable[k] = sData
						datalist[k] = ZO_ScrollList_CreateDataEntry( 1, 
						{
							RecipeName = rData,
						}
						)
					end
				end
				ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
			end
		end
	end
end

local function IngRecipeSearch(mode) -- Show list of recipes containing selected ingredients
	local datalist = ZO_ScrollList_GetDataList(ESOMRL_MainFrameListFrameList)
	ClearRecipeSearchList(datalist)
	local ingredients = {}
	local match = {}
	local known
	local row = 0
	textInput = ""
	openTab = 52
	for k, v in pairs(IngredientTable) do -- build the list of currently tracked ingredients
		if GetIngredientSavedVar(k) == 1 then
			if not pCO(ingredients, k) then
				ingredients[k] = true
			end
		end
	end

	if mode == 1 then
		ingSearch = 1
		ToggleIngredientPanel(1)
		setMode = 1
		setPage = 1
		if pCK(ingredients) > 0 then

			local tCrossCheck = {}
			local tSearchTable = {}
			local tDatalist = {}
			local oTable = {}
			local LS = {}
			local LSnames = {}
			local CP = {}
			local CPnames = {}
			local AL = {}
			local ALnames = {}

			local kOnly, uOnly = KnownUnknownDB(ProvisioningTable)
			local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

			for k, v in pairs(ProvisioningTable) do
				local linkcheck = v.link
				local numIngredients = GetItemLinkRecipeNumIngredients(linkcheck)
				for n = 1, numIngredients do
					local ingLink = GetItemLinkRecipeIngredientItemLink(linkcheck, i)
					local ingID = GetItemLinkItemId(ingLink)
					if ingredients[ingID] then
						match[k] = true
					end
				end
			end
			if pCK(match) > 0 then
				for i = 1, #opTable do
					local tData = opTable[i].data
					if (match[opTable[i].key]) then
						local color = dQC[GetItemLinkQuality(tData.link)]
						local level = FormatTooltipText(tData.level)
						local nrId = GetItemLinkItemId(tData.item)
						local saved = GetRecipeSavedVar(nrId, 1)
						local linkname = GetItemLinkName(tData.item)
						local namestring = LangFormat(linkname)
						if IsItemLinkRecipeKnown(tData.link) == false then
							if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
								writSet = 1
								if saved == 1 then known = DB.IconStrings[6] elseif saved == 0 then known = DB.IconStrings[5] end
							else
								writSet = 0
								if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
							end
						else
							if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
								writSet = 1
								if saved == 2 then known = DB.IconStrings[6] elseif saved == 3 then known = DB.IconStrings[5] end
							else
								writSet = 0
								if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
							end
						end
						row = row + 1
						tCrossCheck[row] = {item = tData.item, row = row}
						tSearchTable[row] = { ID = opTable[i].key, text = known..pTC(color,namestring)..pTC("ffffff",' '..level), name = linkname}
						tDatalist[row] = known..pTC(color,namestring) .. pTC("ffffff",' '..level)
					end
				end

				for k, v in pairs(tCrossCheck) do -- sort food/drink by level range, then CP level range, then special "Any Level" items, otherwise sort alphabetically
					local _, _, _, _, hasScaling, minLevel, maxLevel, isChampionPoints, _ = GetItemLinkOnUseAbilityInfo(v.item)
					local iName = zo_strformat("<<t:1>>",GetItemLinkName(v.item))
					local iTag = tostring(tSearchTable[v.row].ID)
					local fMin = string.format("%02.0f", tostring(minLevel)) -- concatenation to sort by level range

					if not hasScaling then
						AL[#AL + 1] = iName..iTag
						ALnames[iName..iTag] = v
					else
						if not isChampionPoints then
							LS[#LS + 1] = fMin..iName..iTag
							LSnames[fMin..iName..iTag] = v
						else
							CP[#CP + 1] = fMin..iName..iTag
							CPnames[fMin..iName..iTag] = v
						end
					end
				end
				table.sort(LS)
				table.sort(CP)
				table.sort(AL)

				for i = 1, #LS do
					oTable[#oTable + 1] = LSnames[LS[i]]
				end
				for i = 1, #CP do
					oTable[#oTable + 1] = CPnames[CP[i]]
				end
				for i = 1, #AL do
					oTable[#oTable + 1] = ALnames[AL[i]]
				end

				for k, v in ipairs(oTable) do
					local sData = tSearchTable[v.row]
					local rData = tDatalist[v.row]
					searchTable[k] = sData
					datalist[k] = ZO_ScrollList_CreateDataEntry( 1, 
					{
						RecipeName = rData,
					}
					)
				end
				ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
			end
		end
	else
		ingSearch = 2
		ClearTooltip(InformationTooltip)
		ToggleIngredientPanel(0)
		setMode = 0
		setPage = 1
		if pCK(ingredients) > 0 then
			for k, v in pairs(FurnitureTable) do
				local linkcheck = v.link
				local numIngredients = GetItemLinkRecipeNumIngredients(linkcheck)
				for n = 1, numIngredients do
					local ingLink = GetItemLinkRecipeIngredientItemLink(linkcheck, i)
					local ingID = GetItemLinkItemId(ingLink)
					if ingredients[ingID] then
						match[k] = true
					end
				end
			end
			if pCK(match) > 0 then
				local tCrossCheck = {}
				local tSearchTable = {}
				local tDatalist = {}
				local oTable = {}
				local AL = {}
				local ALnames = {}
				local BL = {}
				local BLnames = {}
				local CL = {}
				local CLnames = {}
				local EN = {}
				local ENnames = {}
				local PR = {}
				local PRnames = {}
				local WD = {}
				local WDnames = {}
				local JC = {}
				local JCnames = {}

				local kOnly, uOnly = KnownUnknownDB(FurnitureTable)
				local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

				for i = 1, #opTable do
					local tData = opTable[i].data
					if (match[opTable[i].key]) then
						local nrId = GetItemLinkItemId(tData.item)
						local color = dQC[GetItemLinkQuality(tData.link)]
						local saved = GetRecipeSavedVar(nrId, 100)
						local catstring = " \("..DB.SkillTypes[GetItemLinkRecipeCraftingSkillType(tData.link)].."\)"
						local linkname = GetItemLinkName(tData.item)
						local namestring = LangFormat(linkname)
						local preview -- optionally show preview icon for recipes that can be right-click 3d-previewed
					--	if PREVIEW:CanPreviewItemLink(tData.link) and ESOMRL.ASV.aOpts.previewicon then
					--		preview = ' |t16:16:/esoui/art/cursors/cursor_preview.dds|t'
					--	else
							preview = ''
					--	end
						if IsItemLinkRecipeKnown(tData.link) == false then
							if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
						else
							if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
						end
						row = row + 1
						tCrossCheck[row] = {item = tData.item, link = tData.link, row = row}
						tSearchTable[row] = { ID = opTable[i].key, text = known..pTC(color,namestring)..catstring..preview, name = linkname, link = tData.item}
						tDatalist[row] = known..pTC(color,namestring)..catstring..preview
					end
				end

				for k, v in pairs(tCrossCheck) do
					local cType = GetItemLinkRecipeCraftingSkillType(v.link)
					local iName = zo_strformat("<<t:1>>",GetItemLinkName(v.item))

					if cType == 1 then -- Blacksmithing
						BL[#BL + 1] = iName
						BLnames[iName] = v
					elseif cType == 2 then -- Clothing
						CL[#CL + 1] = iName
						CLnames[iName] = v
					elseif cType == 3 then -- Enchanting
						EN[#EN + 1] = iName
						ENnames[iName] = v
					elseif cType == 4 then -- Alchemy
						AL[#AL + 1] = iName
						ALnames[iName] = v
					elseif cType == 5 then -- Provisioning
						PR[#PR + 1] = iName
						PRnames[iName] = v
					elseif cType == 6 then -- Woodworking
						WD[#WD + 1] = iName
						WDnames[iName] = v
					elseif cType == 7 then -- Jewelry Crafting
						JC[#JC + 1] = iName
						JCnames[iName] = v
					end
				end

				table.sort(AL)
				table.sort(BL)
				table.sort(CL)
				table.sort(EN)
				table.sort(PR)
				table.sort(WD)
				table.sort(JC)

				for i = 1, #AL do
					oTable[#oTable + 1] = ALnames[AL[i]]
				end
				for i = 1, #BL do
					oTable[#oTable + 1] = BLnames[BL[i]]
				end
				for i = 1, #CL do
					oTable[#oTable + 1] = CLnames[CL[i]]
				end
				for i = 1, #EN do
					oTable[#oTable + 1] = ENnames[EN[i]]
				end
				for i = 1, #PR do
					oTable[#oTable + 1] = PRnames[PR[i]]
				end
				for i = 1, #WD do
					oTable[#oTable + 1] = WDnames[WD[i]]
				end
				for i = 1, #JC do
					oTable[#oTable + 1] = JCnames[JC[i]]
				end

				for k, v in ipairs(oTable) do
					local sData = tSearchTable[v.row]
					local rData = tDatalist[v.row]
					searchTable[k] = sData
					datalist[k] = ZO_ScrollList_CreateDataEntry( 1, 
					{
						RecipeName = rData,
					}
					)
				end
				ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
			end
		end
	end
end

local function GetWrits() -- Populate recipe list based on current active writ requirements
	local datalist = ZO_ScrollList_GetDataList(ESOMRL_MainFrameListFrameList)
	ClearRecipeSearchList(datalist)

	if GetWritID() ~= 0 then
		openTab = 51
		textInput = ''
		local row = 0

		for k, v in pairs(ProvisioningTable) do
			local nrId = GetItemLinkItemId(v.item)
			if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
				local color = dQC[GetItemLinkQuality(v.item)]
				local level = FormatTooltipText(v.level) 
				local saved = GetRecipeSavedVar(nrId, 1)
				local linkname = GetItemLinkName(v.item)
				local namestring = LangFormat(linkname)
				local known
				if IsItemLinkRecipeKnown(v.link) == false then
					if saved == 1 then known = DB.IconStrings[6] elseif saved == 0 then known = DB.IconStrings[5] end
				else
					if saved == 2 then known = DB.IconStrings[6] elseif saved == 3 then known = DB.IconStrings[5] end
				end
				row = row + 1
				searchTable[row] = { ID = k, writ = 1, text = known..pTC(color,namestring)..pTC("ffffff",' '..level), name = linkname }
				datalist[row] = ZO_ScrollList_CreateDataEntry( 1, 
				{
					RecipeName = known..pTC(color,namestring)..pTC("ffffff",' '..level),
				}
				)
			end
		end
		ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
		editText = 2
	end
end

local function TrackNavigationTier(list) -- Marks the entire tier as tracked if holding shift when clicking the button
	list = (list ~= nil) and list or 1
	local tDB

	if list < 23 then
		tDB = ESOMRL.DB.ProvisioningSubLists[list].sDB
	elseif list > 100 then
		tDB = ESOMRL.DB.FurnitureSubLists[list].sDB
	end
	if setMode == 1 then
		for k, v in pairs(tDB) do
			local nrId = GetItemLinkItemId(v.item)
			local savedvar = GetRecipeSavedVar(nrId, 1)
			if savedvar == 3 then
				SetRecipeSavedVar(nrId, 1, 2)
				recTracked = recTracked + 1
			elseif savedvar == 0 then
				SetRecipeSavedVar(nrId, 1, 1)
				recTracked = recTracked + 1
			end
		end
	else
		if #tDB > 0 then
			for k, v in pairs(tDB) do
				local nrId = GetItemLinkItemId(v.item)
				local savedvar = GetRecipeSavedVar(nrId, 100)
				if savedvar == 3 then
					SetRecipeSavedVar(nrId, 100, 2)
					furTracked = furTracked + 1
				elseif savedvar == 0 then
					SetRecipeSavedVar(nrId, 100, 1)
					furTracked = furTracked + 1
				end
			end
		end
	end
	SetTrackedRecipeCountText(true)
	RefreshViews()
end

local function NavigateScrollList(list) -- Populate recipe list based on navigation item clicked
	local datalist = ZO_ScrollList_GetDataList(ESOMRL_MainFrameListFrameList)
	ClearRecipeSearchList(datalist)
	local linktable
	local known
	local row = 0
	textInput = ''
	list = (list ~= nil) and list or 1

	if list < 23 then
		linktable = ESOMRL.DB.ProvisioningSubLists[list].sDB
		openTab = list
	elseif list > 100 then
		local tDB = ESOMRL.DB.FurnitureSubLists[list].sDB
		local reset = ESOMRL.DB.FurnitureSubLists[list].pos
		linktable = tDB
		openTab = list
		ResetFurnitureNav(reset)
	end

	local kOnly, uOnly = KnownUnknownDB(linktable)
	local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

	if setMode == 1 then
		for i = 1, #opTable do
			local tData = opTable[i].data
			local tId = tData.ID
			local color = dQC[GetItemLinkQuality(tData.item)]
			local level = (ProvisioningTable[tId] ~= nil) and FormatTooltipText(ProvisioningTable[tId].level) or 0
			local nrId = GetItemLinkItemId(tData.item)
			local saved = GetRecipeSavedVar(nrId, 1)
			local linkname = GetItemLinkName(tData.item)
			local namestring = LangFormat(linkname)
			local writSet = 0

			if IsItemLinkRecipeKnown(tData.link) == false and not kOnly then
				if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
					writSet = 1
					if saved == 1 then known = DB.IconStrings[6] elseif saved == 0 then known = DB.IconStrings[5] end
				else
					writSet = 0
					if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
				end
			elseif (IsItemLinkRecipeKnown(tData.link)) then
				if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
					writSet = 1
					if saved == 2 then known = DB.IconStrings[6] elseif saved == 3 then known = DB.IconStrings[5] end
				else
					writSet = 0
					if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
				end
			end

			row = row + 1
			searchTable[row] = { ID = tId, writ = writSet, text = known..pTC(color,namestring)..pTC("ffffff",' '..level), name = linkname }
			datalist[i] = ZO_ScrollList_CreateDataEntry( 1, 
			{
				RecipeName = known..pTC(color,namestring)..pTC("ffffff",' '..level),
			}
			)
		end
		ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
	else
		if #opTable > 0 then
			for i = 1, #opTable do
				local tData = opTable[i].data
				local tId = tData.ID
				local color = dQC[GetItemLinkQuality(tData.link)]
				local nrId = GetItemLinkItemId(tData.item)
				local saved = GetRecipeSavedVar(nrId, 100)
				local catstring = " \("..DB.SkillTypes[GetItemLinkRecipeCraftingSkillType(tData.link)].."\)"
				local linkname = GetItemLinkName(tData.item)
				local namestring = LangFormat(linkname)
				local preview -- optionally show preview icon for recipes that can be right-click 3d-previewed
			--	if PREVIEW:CanPreviewItemLink(tData.link) and ESOMRL.ASV.aOpts.previewicon then
			--		preview = ' |t16:16:/esoui/art/cursors/cursor_preview.dds|t'
			--	else
					preview = ''
			--	end

				if IsItemLinkRecipeKnown(tData.link) == false and not kOnly then
					if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
				elseif (IsItemLinkRecipeKnown(tData.link)) then
					if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
				end

				row = row + 1
				searchTable[row] = { ID = tId, text = known..pTC(color,namestring)..catstring..preview, name = linkname }
				datalist[i] = ZO_ScrollList_CreateDataEntry( 1, 
				{
					RecipeName = known..pTC(color,namestring)..catstring..preview,
				}
				)
			end
		else
			searchTable[1] = { ID = tId, text = ' ', name = ' ' }
			datalist[1] = ZO_ScrollList_CreateDataEntry( 1, 
			{
				RecipeName = L.ESOMRL_NOENTRIES,
			}
			)
		end
		ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
	end
	ZO_ScrollList_ScrollDataIntoView(ESOMRL_MainFrameListFrameList, 1)
end

local function TrackQuality(tier) -- Mark all recipes of a selected improvement rank as tracked when shift-clicking
	for k, v in pairs(ProvisioningTable) do
		local rank = GetItemLinkRecipeRankRequirement(v.link)
		if rank == tier then
			local nrId = GetItemLinkItemId(v.item)
			local savedvar = GetRecipeSavedVar(nrId, 1)
			if savedvar == 3 then
				SetRecipeSavedVar(nrId, 1, 2)
				recTracked = recTracked + 1
			elseif savedvar == 0 then
				SetRecipeSavedVar(nrId, 1, 1)
				recTracked = recTracked + 1
			end
		end
	end
	SetTrackedRecipeCountText(true)
	RefreshViews()
end

local function NavigateQuality() -- Populate recipe list based on improvement rank clicked
	local datalist = ZO_ScrollList_GetDataList(ESOMRL_MainFrameListFrameList)
	ClearRecipeSearchList(datalist)
	local known
	local row = 0
	openTab = 53

	local kOnly, uOnly = KnownUnknownDB(ProvisioningTable)
	local opTable = (kOnly) and subKnownTable or (uOnly) and subUnknownTable or subAllTable

	for i = 1, #opTable do
		local tData = opTable[i].data
		if GetItemLinkRecipeRankRequirement(tData.link) == lastTier then
			local color = dQC[GetItemLinkQuality(tData.item)]
			local level = FormatTooltipText(tData.level)
			local nrId = GetItemLinkItemId(tData.item)
			local saved = GetRecipeSavedVar(nrId, 1)
			local linkname = GetItemLinkName(tData.item)
			local namestring = LangFormat(linkname)
			local writSet = 0

			if IsItemLinkRecipeKnown(tData.link) == false and not kOnly then
				if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
					if saved == 1 then known = DB.IconStrings[6] elseif saved == 0 then known = DB.IconStrings[5] end
					writSet = 1
				else
					if saved == 1 then known = DB.IconStrings[4] elseif saved == 0 then known = DB.IconStrings[3] end
					writSet = 0
				end
			elseif (IsItemLinkRecipeKnown(tData.link)) then
				if nrId == ESOMRL.CSV.cOpts.cWrit1 or nrId == ESOMRL.CSV.cOpts.cWrit2 then
					writSet = 1
					if saved == 2 then known = DB.IconStrings[6] elseif saved == 3 then known = DB.IconStrings[5] end
				else
					writSet = 0
					if saved == 2 then known = DB.IconStrings[2] elseif saved == 3 then known = DB.IconStrings[1] end
				end
			end

			row = row + 1
			searchTable[row] = { ID = opTable[i].key, writ = writSet, text = known..pTC(color,namestring)..pTC("ffffff",' '..level), name = linkname }
			datalist[row] = ZO_ScrollList_CreateDataEntry( 1, 
			{
				RecipeName = known..pTC(color,namestring)..pTC("ffffff",' '..level),
			}
			)
		end
	end
	ZO_ScrollList_Commit(ESOMRL_MainFrameListFrameList, datalist)
	ZO_ScrollList_ScrollDataIntoView(ESOMRL_MainFrameListFrameList, 1)
end

local function TrackShown() -- Sets all recipes currently displayed in the result list to tracked
	if trackingShown == 1 then
		return
	else -- button spam prevention
		trackingShown = 1
		if #searchTable > 0 then
			if setMode == 1 then
				for s = 1, #searchTable do
					local ID = searchTable[s].ID
					for k, v in pairs(ProvisioningTable) do
						if k == ID then
							local nrId = GetItemLinkItemId(v.item)
							local savedvar = GetRecipeSavedVar(nrId, 1)
							if savedvar == 3 then
								SetRecipeSavedVar(nrId, 1, 2)
								recTracked = recTracked + 1
							elseif savedvar == 0 then
								SetRecipeSavedVar(nrId, 1, 1)
								recTracked = recTracked + 1
							end
						end
					end
				end
			else
				for s = 1, #searchTable do
					local ID = searchTable[s].ID
					for k, v in pairs(FurnitureTable) do
						if k == ID then
							local nrId = GetItemLinkItemId(v.item)
							local savedvar = GetRecipeSavedVar(nrId, 100)
							if savedvar == 3 then
								SetRecipeSavedVar(nrId, 100, 2)
								furTracked = furTracked + 1
							elseif savedvar == 0 then
								SetRecipeSavedVar(nrId, 100, 1)
								furTracked = furTracked + 1
							end
						end
					end
				end
			end
			ESOMRL.XMLNavigation(502) -- ResetScrollList()
		end
		trackingShown = 0
	end
end

local function StationSearch(control, option, sOpen) -- Search MRL for the selected cooking station item
	if option == 1 then
		InitializeTooltip(InformationTooltip, control, BOTTOMLEFT, 0, -11, TOPRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_SEARCHS)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		local control = GetControl('ESOMRL_MainFrame')
		if control:IsHidden() then
			SCENE_MANAGER:ShowTopLevel(ESOMRL_MainFrame)
			RestorePosition()
			openTab = 1
			SetTrackedRecipeCountText()
			RecipePanelRestore()
		else
			if sOpen then
				SCENE_MANAGER:HideTopLevel(ESOMRL_MainFrame)
			end
		end
		if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING then
			if stationTab == 3 then
				textInput = stationSelect
				ESOMRL_MainFrameSelectionFrame:SetHidden(true)
				ESOMRL_MainFrameFurnitureFrame:SetHidden(false)
				ESOMRL_MainFrameListFrame:SetHidden(false)
				ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
				ESOMRL_MainFrameFoodButton:SetHidden(false)
				
			--	Ability to 3D preview patched out of the game, researching workaround.
			--	ESOMRL_MainFrame3DButton:SetHidden(false)
				ESOMRL.ASV.aOpts.previewicon = false

				ESOMRL_MainFrameFurnitureButton:SetHidden(true)
				ESOMRL_MainFrameListFrameQuality:SetHidden(true)
				ESOMRL_MainFramePageButton:SetHidden(false)
				ESOMRL_MainFramePageButton:ClearAnchors()
				ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFoodButton, TOPRIGHT, -9, 0)
				setPage = 0
				setMode = 0
				if sOpen then
					NavigateScrollList(sDA[CRAFTING_TYPE_PROVISIONING].nav)
				else
					TextSearch(1)
				end
				if stationSelect ~= "" then
					UpdateStationTooltip()
				end
			elseif (stationTab == 1 or stationTab == 2) then
				textInput = stationSelect
				ESOMRL_MainFrameSelectionFrame:SetHidden(false)
				ESOMRL_MainFrameFurnitureFrame:SetHidden(true)
				ESOMRL_MainFrameListFrame:SetHidden(false)
				ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
				ESOMRL_MainFrameFoodButton:SetHidden(true)
				ESOMRL_MainFrame3DButton:SetHidden(true)
				ESOMRL_MainFrameFurnitureButton:SetHidden(false)
				ESOMRL_MainFrameListFrameQuality:SetHidden(false)
				ESOMRL_MainFramePageButton:SetHidden(false)
				ESOMRL_MainFramePageButton:ClearAnchors()
				ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFurnitureButton, TOPRIGHT, -9, 0)
				setPage = 1
				setMode = 1
				if sOpen then
					NavigateScrollList(1)
				else
					TextSearch(1)
				end
				if stationSelect ~= "" then
					UpdateStationTooltip()
				end
			end
		else
			textInput = stationSelect
			ESOMRL_MainFrameSelectionFrame:SetHidden(true)
			ESOMRL_MainFrameFurnitureFrame:SetHidden(false)
			ESOMRL_MainFrameListFrame:SetHidden(false)
			ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
			ESOMRL_MainFrameFoodButton:SetHidden(false)

		--	Ability to 3D preview patched out of the game, researching workaround.
		--	ESOMRL_MainFrame3DButton:SetHidden(false)
			ESOMRL.ASV.aOpts.previewicon = false

			ESOMRL_MainFrameFurnitureButton:SetHidden(true)
			ESOMRL_MainFrameListFrameQuality:SetHidden(true)
			ESOMRL_MainFramePageButton:SetHidden(false)
			ESOMRL_MainFramePageButton:ClearAnchors()
			ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFoodButton, TOPRIGHT, -9, 0)
			setPage = 0
			setMode = 0
			if sOpen then
				NavigateScrollList(sDA[GetCraftingInteractionType()].nav)
			else
				TextSearch(1)
			end
			if stationSelect ~= "" then
				UpdateStationTooltip()
			end
		end
	end
end

local function ResetStationNavigation(option) -- Closes all open recipe trees at the cooking station
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_RESETNAV)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		for k, v in pairs(statNodes) do
			local tnode = v.tnode
			local treeNode = tnode.node.tree
			if tnode.node.open then
				ZO_TreeHeader_OnMouseUp(tnode, true)
			end
			treeNode.exclusive = false
			treeNode.open = false
		end
		statNodes = {}
		ClearStationSelection()
	end
end

local function SetSortOrder(mode, option) -- Toggles between ascending and descending sort order when sort by level enabled
	if option == 1 then
		local tText = (mode == 1) and L.ESOMRL_SORTASCENDING or L.ESOMRL_SORTDESCENDING
		InitializeTooltip(InformationTooltip, ESOMRLStationButton, BOTTOMLEFT, 0, -11, TOPRIGHT)
		SetTooltipText(InformationTooltip, tText)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if mode == 1 then
			ESOMRL.ASV.aOpts.sortAscending = false
			ESOMRLSortOrderDown:SetHidden(true)
			ESOMRLSortOrderUp:SetHidden(false)
		else
			ESOMRL.ASV.aOpts.sortAscending = true
			ESOMRLSortOrderUp:SetHidden(true)
			ESOMRLSortOrderDown:SetHidden(false)
		end
		PROVISIONER_MANAGER:BuildRecipeListData(GetCraftingInteractionType())
		StationControl:RefreshRecipeList()
	elseif mode == 4 then
		if (ESOMRL.ASV.aOpts.sortByLevel) and GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING and (stationTab == 1 or stationTab == 2) then
			if (ESOMRL.ASV.aOpts.sortAscending) then
				ESOMRLSortOrderUp:SetHidden(true)
				ESOMRLSortOrderDown:SetHidden(false)
			else
				ESOMRLSortOrderDown:SetHidden(true)
				ESOMRLSortOrderUp:SetHidden(false)
			end
		else
			ESOMRLSortOrderDown:SetHidden(true)
			ESOMRLSortOrderUp:SetHidden(true)
		end
	end
end

local function ShowPreviewIcon(option) -- Toggles icon for furniture recipes that can be right-click 3D-previewed
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_SHOW3DICON)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if ESOMRL.ASV.aOpts.previewicon == true then
			ClearTooltip(InformationTooltip)
			ESOMRL.ASV.aOpts.previewicon = false
		else
			ClearTooltip(InformationTooltip)
			ESOMRL.ASV.aOpts.previewicon = true
		end
		ESOMRL.XMLNavigation(502, true) -- ResetScrollList()
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Handle the clicking of items in the active recipe list, setting and clearing tracked items
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function CountRecipeTrackingList(option, tier) -- Counts the current number of recipes you are tracking
	if setMode == 1 then
		if option == 0 then
			recTracked = recTracked - 1
		elseif option == 1 then
			recTracked = recTracked + 1
		end
	else
		if option == 0 then
			furTracked = furTracked - 1
		elseif option == 1 then
			furTracked = furTracked + 1
		end
	end
	SetTrackedRecipeCountText()
	RefreshViews()
end

local function TrackAllRecipes(option) -- Set all recipes to tracked
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_TRACKALL)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if setMode == 1 then
			for k, v in pairs(ProvisioningTable) do
				local nrId = GetItemLinkItemId(v.item)
				local savedvar = GetRecipeSavedVar(nrId, 1)
				if savedvar == 3 then
					SetRecipeSavedVar(nrId, 1, 2)
					recTracked = recTracked + 1
				elseif savedvar == 0 then
					SetRecipeSavedVar(nrId, 1, 1)
					recTracked = recTracked + 1
				end
			end
		else
			for k, v in pairs(FurnitureTable) do
				local nrId = GetItemLinkItemId(v.item)
				local savedvar = GetRecipeSavedVar(nrId, 100)
				if savedvar == 3 then
					SetRecipeSavedVar(nrId, 100, 2)
					furTracked = furTracked + 1
				elseif savedvar == 0 then
					SetRecipeSavedVar(nrId, 100, 1)
					furTracked = furTracked + 1
				end
			end
		end
		ESOMRL.XMLNavigation(502) -- ResetScrollList()
	end
end

local function TrackUnknownRecipes(option) -- Track recipes the current selected character does not know
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_TRACKUNKNOWN)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if setMode == 1 then
			for k, v in pairs(ProvisioningTable) do
				local nrId = GetItemLinkItemId(v.item)
				local savedvar = GetRecipeSavedVar(nrId, 1)
				if not pCO(ESOMRL.ASV.pRecipeKnown[nrId].IDs, currentCharID) then
					if savedvar == 3 then
						SetRecipeSavedVar(nrId, 1, 2)
						recTracked = recTracked + 1
					elseif savedvar == 0 then
						SetRecipeSavedVar(nrId, 1, 1)
						recTracked = recTracked + 1
					end
				end
			end
		else
			for k, v in pairs(FurnitureTable) do
				local nrId = GetItemLinkItemId(v.item)
				local savedvar = GetRecipeSavedVar(nrId, 100)
				if not pCO(ESOMRL.ASV.fRecipeKnown[nrId].IDs, currentCharID) then
					if savedvar == 3 then
						SetRecipeSavedVar(nrId, 100, 2)
						furTracked = furTracked + 1
					elseif savedvar == 0 then
						SetRecipeSavedVar(nrId, 100, 1)
						furTracked = furTracked + 1
					end
				end
			end
		end
		ESOMRL.XMLNavigation(502) -- ResetScrollList()
	end
end

local function ClearTrackedRecipes() -- Clears all tracked recipes removing tooltip line
	if setMode == 1 then
		recTracked = 0
		for k, v in pairs(ProvisioningTable) do
			local nrId = GetItemLinkItemId(v.item)
			if IsItemLinkRecipeKnown(v.link) == false then
				SetRecipeSavedVar(nrId, 1, 0)
			else
				if GetRecipeSavedVar(nrId, 1) == 2 then
					SetRecipeSavedVar(nrId, 1, 3)
				end
			end
		end
	else
		furTracked = 0
		for k, v in pairs(FurnitureTable) do
			local nrId = GetItemLinkItemId(v.item)
			if IsItemLinkRecipeKnown(v.link) == false then
				SetRecipeSavedVar(nrId, 100, 0)
			else
				if GetRecipeSavedVar(nrId, 100) == 2 then
					SetRecipeSavedVar(nrId, 100, 3)
				end
			end
		end
	end
	ESOMRL.XMLNavigation(502) -- ResetScrollList()	
end

local function RecipeListClick(clicktext, button) -- Handles clicking and shift-clicking of list items
	local tooltipstyle = ESOMRL.ASV.aOpts.tooltipstyle
	local scrollTarget
	if openTab < 50 or openTab > 100 then
		for i = 1, #searchTable do
			local name = searchTable[i].text
			local writ = searchTable[i].writ
			local tId = searchTable[i].ID
			local known = name:gsub(DB.IconStrings[1],''):gsub(DB.IconStrings[2],''):gsub(DB.IconStrings[3],''):gsub(DB.IconStrings[4],''):gsub(DB.IconStrings[5],''):gsub(DB.IconStrings[6],'')
			if clicktext == name then
				scrollTarget = i
				if IsShiftKeyDown() == false then
					local savedval
					if setMode == 1 then
						local nrId = GetItemLinkItemId(ProvisioningTable[tId].item)
						savedval = GetRecipeSavedVar(nrId, 1)
						local iconstring = ''
						if savedval == 0 then
							SetRecipeSavedVar(nrId, 1, 1)
							iconstring = (writ == 1) and DB.IconStrings[5] or DB.IconStrings[4]
							known = iconstring .. known
							CountRecipeTrackingList(1, openTab)
						elseif savedval == 1 then
							SetRecipeSavedVar(nrId, 1, 0)
							iconstring = (writ == 1) and DB.IconStrings[6] or DB.IconStrings[3]
							known = iconstring .. known
							CountRecipeTrackingList(0, openTab)
						elseif savedval == 2 then
							SetRecipeSavedVar(nrId, 1, 3)
							iconstring = (writ == 1) and DB.IconStrings[5] or DB.IconStrings[1]
							known = iconstring .. known
							CountRecipeTrackingList(0, openTab)
						elseif savedval == 3 then
							SetRecipeSavedVar(nrId, 1, 2)
							iconstring = (writ == 1) and DB.IconStrings[6] or DB.IconStrings[2]
							known = iconstring .. known
							CountRecipeTrackingList(1, openTab)
						end
						searchTable[i].text = known
						ESOMRL_MainFrameListFrameList.data[i].data.RecipeName = known
						ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
						ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
						if StationControl then
							zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
						end
						RecipePanelRestore()
					else
					--	if button == 2 then -- preview furniture with a Crown version (API limitation) on right-click
					--		local fLink = FurnitureTable[tId].link
					--		local sMode = GetCraftingInteractionType()
					--		if sDA[sMode] ~= nil and sDA[sMode].tab == stationTab then
					--			d(L.ESOMRL_EXITSTATION)
					--		else
					--			if PREVIEW:CanPreviewItemLink(fLink) then
					--				PREVIEW:PreviewItemLink(fLink)
					--			else
					--				if ESOMRL.ASV.aOpts.debugmode == true then
					--					d(L.ESOMRL_ONLYCROWN3D)
					--				end
					--			end
					--		end
					--	else
							local nrId = GetItemLinkItemId(FurnitureTable[tId].item)
							savedval = GetRecipeSavedVar(nrId, 100)
							if savedval == 0 then
								SetRecipeSavedVar(nrId, 100, 1)
								known = DB.IconStrings[4] .. known
								CountRecipeTrackingList(1, openTab)
							elseif savedval == 1 then
								SetRecipeSavedVar(nrId, 100, 0)
								known = DB.IconStrings[3] .. known
								CountRecipeTrackingList(0, openTab)
							elseif savedval == 2 then
								SetRecipeSavedVar(nrId, 100, 3)
								known = DB.IconStrings[1] .. known
								CountRecipeTrackingList(0, openTab)
							elseif savedval == 3 then
								SetRecipeSavedVar(nrId, 100, 2)
								known = DB.IconStrings[2] .. known
								CountRecipeTrackingList(1, openTab)
							end
							searchTable[i].text = known
							ESOMRL_MainFrameListFrameList.data[i].data.RecipeName = known
							ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
							ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
							if StationControl then
								zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
							end
							RecipePanelRestore()
					--	end
					end
				elseif IsShiftKeyDown() == true then
					local ChatEditControl = CHAT_SYSTEM.textEntry.editControl
					if not ChatEditControl:HasFocus() then 
						StartChatInput()
					end
					if setMode == 1 then
						if tooltipstyle == 0 then
							ChatEditControl:InsertText(ProvisioningTable[tId].link)
						elseif tooltipstyle == 1 then
							ChatEditControl:InsertText(ProvisioningTable[tId].item)
						end
					else
						if tooltipstyle == 0 then
							ChatEditControl:InsertText(FurnitureTable[tId].link)
						elseif tooltipstyle == 1 then
							ChatEditControl:InsertText(FurnitureTable[tId].item)
						end
					end
				end
			end
		end
	else
		for i = 1, #searchTable do
			local name = searchTable[i].text
			local writ = searchTable[i].writ
			local tId = searchTable[i].ID
			local known = name:gsub(DB.IconStrings[1],''):gsub(DB.IconStrings[2],''):gsub(DB.IconStrings[3],''):gsub(DB.IconStrings[4],''):gsub(DB.IconStrings[5],''):gsub(DB.IconStrings[6],'')
			if clicktext == name then
				scrollTarget = i
				if setMode == 1 then
					if IsShiftKeyDown() == false then
						local nrId = GetItemLinkItemId(ProvisioningTable[tId].item)
						local savedval = GetRecipeSavedVar(nrId, 1)
						local iconstring = ''
						if savedval == 0 then
							SetRecipeSavedVar(nrId, 1, 1)
							iconstring = (writ == 1) and DB.IconStrings[5] or DB.IconStrings[4]
							known = iconstring .. known
							CountRecipeTrackingList(1, openTab)
						elseif savedval == 1 then
							SetRecipeSavedVar(nrId, 1, 0)
							iconstring = (writ == 1) and DB.IconStrings[6] or DB.IconStrings[3]
							known = iconstring .. known
							CountRecipeTrackingList(0, openTab)
						elseif savedval == 2 then
							SetRecipeSavedVar(nrId, 1, 3)
							iconstring = (writ == 1) and DB.IconStrings[5] or DB.IconStrings[1]
							known = iconstring .. known
							CountRecipeTrackingList(0, openTab)
						elseif savedval == 3 then
							SetRecipeSavedVar(nrId, 1, 2)
							iconstring = (writ == 1) and DB.IconStrings[6] or DB.IconStrings[2]
							known = iconstring .. known
							CountRecipeTrackingList(1, openTab)
						end
						searchTable[i].text = known
						ESOMRL_MainFrameListFrameList.data[i].data.RecipeName = known
						ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
						ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
						if StationControl then
							zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
						end
						RecipePanelRestore()
					elseif IsShiftKeyDown() == true then
						local ChatEditControl = CHAT_SYSTEM.textEntry.editControl
						if not ChatEditControl:HasFocus() then 
							StartChatInput() 
						end
						if tooltipstyle == 0 then
							ChatEditControl:InsertText(ProvisioningTable[tId].link)
						elseif tooltipstyle == 1 then
							ChatEditControl:InsertText(ProvisioningTable[tId].item)
						end
					end
				else
					if IsShiftKeyDown() == false then
					--	if button == 2 then -- preview furniture with a Crown version (API limitation) on right-click
					--		local fLink = FurnitureTable[tId].link
					--		local sMode = GetCraftingInteractionType()
					--		if sDA[sMode] ~= nil and sDA[sMode].tab == stationTab then
					--			d(L.ESOMRL_EXITSTATION)
					--		else
					--			if PREVIEW:CanPreviewItemLink(fLink) then
					--				PREVIEW:PreviewItemLink(fLink)
					--			else
					--				if ESOMRL.ASV.aOpts.debugmode == true then
					--					d(L.ESOMRL_ONLYCROWN3D)
					--				end
					--			end
					--		end
					--	else
							local nrId = GetItemLinkItemId(FurnitureTable[tId].item)
							local savedval = GetRecipeSavedVar(nrId, 100)
							if savedval == 0 then
								SetRecipeSavedVar(nrId, 100, 1)
								known = DB.IconStrings[4] .. known
								CountRecipeTrackingList(1, openTab)
							elseif savedval == 1 then
								SetRecipeSavedVar(nrId, 100, 0)
								known = DB.IconStrings[3] .. known
								CountRecipeTrackingList(0, openTab)
							elseif savedval == 2 then
								SetRecipeSavedVar(nrId, 100, 3)
								known = DB.IconStrings[1] .. known
								CountRecipeTrackingList(0, openTab)
							elseif savedval == 3 then
								SetRecipeSavedVar(nrId, 100, 2)
								known = DB.IconStrings[2] .. known
								CountRecipeTrackingList(1, openTab)
							end
							searchTable[i].text = known
							ESOMRL_MainFrameListFrameList.data[i].data.RecipeName = known
							ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
							ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
							if StationControl then
								zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
							end
							RecipePanelRestore()
					--	end
					elseif IsShiftKeyDown() == true then
						local ChatEditControl = CHAT_SYSTEM.textEntry.editControl
						if not ChatEditControl:HasFocus() then 
							StartChatInput() 
						end
						if ESOMRL.ASV.aOpts.tooltipstyle == 0 then
							ChatEditControl:InsertText(FurnitureTable[tId].link)
						elseif ESOMRL.ASV.aOpts.tooltipstyle == 1 then
							ChatEditControl:InsertText(FurnitureTable[tId].item)
						end
					end
				end
			end
		end
	end
	ZO_ScrollList_RefreshVisible(ESOMRL_MainFrameListFrameList)
--	ESOMRL.XMLNavigation(502, nil, scrollTarget) -- ResetScrollList() -- not needed for clicks and resets navigation to top so disabled.
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Handle the clicking of items in the ingredients panel.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function CountIngredientTrackingList(option) -- Counts the current number of ingredients you are tracking
	if option == 0 then
		ingTracked = ingTracked - 1
		SetTrackedIngredientCountText()
	elseif option == 1 then
		ingTracked = ingTracked + 1
		SetTrackedIngredientCountText()
	end
	RefreshViews()
end

local function ClearTrackedIngredients() -- Clears all tracked ingredients removing tooltip line
	ingTracked = 0
	for k, v in pairs(IngredientTable) do
		SetIngredientSavedVar(k, 0)
	end
	SetTrackedIngredientCountText()
	ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
	ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
	IngredientPanelSetup()
	RefreshViews()
end

local function SelectAllIngredients(option, mode) -- Button function to mark all ingredients
	if option == 1 then
		local tText
		if mode == 1 then tText = L.ESOMRL_TRACKALLING end
		if mode == 2 then tText = L.ESOMRL_TRACKNEWING end
		if mode == 3 then tText = L.ESOMRL_TRACKOLDING end
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, tText)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		for k, v in pairs(IngredientTable) do
			if v.itier == 0 then
				if GetIngredientSavedVar(k) == 0 then
					SetIngredientSavedVar(k, 1)
					ingTracked = ingTracked + 1
				
				end
			end
		end
	elseif option == 4 then
		for k, v in pairs(IngredientTable) do
			if v.itier == 1 then
				if GetIngredientSavedVar(k) == 0 then
					SetIngredientSavedVar(k, 1)
					ingTracked = ingTracked + 1
				end
			end
		end
	elseif option == 5 then
		for k, v in pairs(IngredientTable) do
			if GetIngredientSavedVar(k) == 0 then
				SetIngredientSavedVar(k, 1)
				ingTracked = ingTracked + 1
			end
		end
	end
	if option > 2 then
		ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
		ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
		SetTrackedIngredientCountText()
		IngredientPanelSetup()
		RefreshViews()
	end
end

local function FindIngredientRecipes(option, mode) -- Find recipes containing selected ingredients
	if option == 1 then
		local tText
		if mode == 1 then tText = L.ESOMRL_FINDFOODRECS end
		if mode == 2 then tText = L.ESOMRL_FINDFURNRECS end
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, tText)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		IngRecipeSearch(mode)
	end
end

local function IngredientListClick(control, icon, option, index) -- Handles clicking and shift-clicking of ingredients
	local IngredientItemTooltip = IngredientItemTooltipControl
	if option == 1 then
		ScaleSelectedIcon(icon, true, false)
		if ESOMRL.ASV.aOpts.lttshow == 1 then
			local itemLink = IngredientTable[index].link
			InitializeTooltip(IngredientItemTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			PopupTooltip.SetLink(IngredientItemTooltip, itemLink)
		end
	elseif option == 2 then
		ScaleSelectedIcon(icon, false, false)
		ClearTooltip(IngredientItemTooltip)
	elseif option == 3 then
		ScaleSelectedIcon(icon, false, true)
	elseif option == 4 then
		local sVar = GetIngredientSavedVar(index)
		ScaleSelectedIcon(icon, true, false)
		if IsShiftKeyDown() == false then
			if sVar == 1 then
				SetIngredientSavedVar(index, 0)
				CountIngredientTrackingList(0)
			elseif sVar == 0 then
				SetIngredientSavedVar(index, 1)
				CountIngredientTrackingList(1)
			end
			ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
			ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
			IngredientPanelSetup()
		elseif IsShiftKeyDown() == true then
			local ChatEditControl = CHAT_SYSTEM.textEntry.editControl
			if not ChatEditControl:HasFocus() then 
				StartChatInput() 
			end
			ChatEditControl:InsertText(IngredientTable[index].link)
		end
	end
end

local function TrackedRecipeCheck() -- Populate the list of tracked ingredients based on those needed by currently tracked recipes
	local ingredients = {}
	for k, v in pairs(ProvisioningTable) do
		local nrId = GetItemLinkItemId(v.item)
		local sVar = GetRecipeSavedVar(nrId, 1)
		if (sVar == 1) or (sVar == 2) then
			local linkcheck = v.link
			local numIngredients = GetItemLinkRecipeNumIngredients(linkcheck)
			for i = 1, numIngredients do
				local ingLink = GetItemLinkRecipeIngredientItemLink(linkcheck, i)
				local ingID = GetItemLinkItemId(ingLink)
				if IngredientIcons[ingID] then
					local ingLink = IngredientTable[ingID].link
					if not ingredients[ingID] then
						ingredients[ingID] = GetItemLinkItemId(ingLink)
					end
				end
			end
		end
	end
	for k, v in pairs(FurnitureTable) do
		local nrId = GetItemLinkItemId(v.item)
		local sVar = GetRecipeSavedVar(nrId, 100)
		if (sVar == 1) or (sVar == 2) then
			local linkcheck = v.link
			local numIngredients = GetItemLinkRecipeNumIngredients(linkcheck)
			for i = 1, numIngredients do
				local ingLink = GetItemLinkRecipeIngredientItemLink(linkcheck, i)
				local ingID = GetItemLinkItemId(ingLink)
				if IngredientIcons[ingID] then
					local ingLink = IngredientTable[ingID].link
					if not ingredients[ingID] then
						ingredients[ingID] = GetItemLinkItemId(ingLink)
					end
				end
			end
		end
	end
	for k, v in pairs(ingredients) do
		if GetIngredientSavedVar(v) == 0 then
			SetIngredientSavedVar(v, 1)
			CountIngredientTrackingList(1)
		end
	end
	IngredientPanelSetup()
end

local function TrackedRecipeIngredients(option) -- Tracked recipe ingredient check init
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_TRACKRING)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
		ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
		SetTrackedIngredientCountText()
		RefreshViews()
		TrackedRecipeCheck()
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Setup functions to handle the junking and deleting of unmarked items based on options
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function JunkUnmarkedRecipeFunction(option)
	local destroyjunkrecipes = ESOMRL.ASV.aOpts.destroyjunkrecipes
	local destroyunmarkedrecipes = ESOMRL.ASV.aOpts.destroyunmarkedrecipes
	local junkunmarkedrecipes = ESOMRL.ASV.aOpts.junkunmarkedrecipes
	local function SetTooltip(text, opt)
		if opt == 1 then
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		else
			ESOMRL_MainFrameListFrameBatchTrackingTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		end
		ClearTooltip(InformationTooltip)
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, text)
	end

	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if destroyjunkrecipes == true then
			if destroyunmarkedrecipes == 0 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DESTROYURECIPE)
			elseif destroyunmarkedrecipes == 1 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DDESTROYURECIPE)
			end
		elseif destroyjunkrecipes == false then
			if junkunmarkedrecipes == 0 then
				SetTooltipText(InformationTooltip, L.ESOMRL_JUNKURECIPE)
			elseif junkunmarkedrecipes == 1 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DJUNKURECIPE)
			end
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if destroyjunkrecipes == true then
			if destroyunmarkedrecipes == 0 then
				ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 1
				SetTooltip(L.ESOMRL_DDESTROYURECIPE, 1)
			elseif destroyunmarkedrecipes == 1 then
				ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
				SetTooltip(L.ESOMRL_DESTROYURECIPE, 0)
			end
		elseif destroyjunkrecipes == false then
			if junkunmarkedrecipes == 0 then
				ESOMRL.ASV.aOpts.junkunmarkedrecipes = 1
				SetTooltip(L.ESOMRL_DJUNKURECIPE, 1)
			elseif junkunmarkedrecipes == 1 then
				ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
				SetTooltip(L.ESOMRL_JUNKURECIPE, 0)
			end
		end
	end
end

local function JunkUnmarkedIngredientFunction(option)
	local destroyjunkingredients = ESOMRL.ASV.aOpts.destroyjunkingredients
	local destroyunmarkedingredients = ESOMRL.ASV.aOpts.destroyunmarkedingredients
	local junkunmarkedingredients = ESOMRL.ASV.aOpts.junkunmarkedingredients
	local function SetTooltip(text, opt)
		if opt == 1 then
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_down.dds")
		else
			ESOMRL_MainFrameIngredientsFrameTrashUncheckedButton:SetNormalTexture("/esoui/art/worldmap/map_indexicon_locations_up.dds")
		end
		ClearTooltip(InformationTooltip)
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, text)
	end

	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if destroyjunkingredients == true then
			if destroyunmarkedingredients == 0 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DESTROYUING)
			elseif destroyunmarkedingredients == 1 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DDESTROYUING)
			end
		elseif destroyjunkingredients == false then
			if junkunmarkedingredients == 0 then
				SetTooltipText(InformationTooltip, L.ESOMRL_JUNKUING)
			elseif junkunmarkedingredients == 1 then
				SetTooltipText(InformationTooltip, L.ESOMRL_DJUNKUING)
			end
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if destroyjunkingredients == true then
			if destroyunmarkedingredients == 0 then
				ESOMRL.ASV.aOpts.destroyunmarkedingredients = 1
				SetTooltip(L.ESOMRL_DDESTROYUING, 1)
			elseif destroyunmarkedingredients == 1 then
				ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
				SetTooltip(L.ESOMRL_DESTROYUING, 0)
			end
		elseif destroyjunkingredients == false then
			if junkunmarkedingredients == 0 then
				ESOMRL.ASV.aOpts.junkunmarkedingredients = 1
				SetTooltip(L.ESOMRL_DJUNKUING, 1)
			elseif junkunmarkedingredients == 1 then
				ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
				SetTooltip(L.ESOMRL_JUNKUING, 0)
			end
		end
	end
end

local function OnInventorySlotUpdate(eventCode, bagId, slotId, isNewItem, itemSoundCategory, updateReason)
	if IsUnderArrest() then return end
	if Roomba and Roomba.WorkInProgress and Roomba.WorkInProgress() then return end
	if IsItemJunk(bagId, slotId) then return end
	local icon, stackCount, sellPrice, meetsUsageRequirements, locked, equipType, itemStyle, quality = GetItemInfo(bagId, slotId)
	if stackCount < 1 then return end
	local destroyjunkingredients = ESOMRL.ASV.aOpts.destroyjunkingredients
	local maxjunkstack = ESOMRL.ASV.aOpts.maxjunkstack
	local ignorestolen = ESOMRL.ASV.aOpts.ignorestolen
	local debugmode = ESOMRL.ASV.aOpts.debugmode
	local destroyjunkrecipes = ESOMRL.ASV.aOpts.destroyjunkrecipes
	local maxjunkquality = ESOMRL.ASV.aOpts.maxjunkquality
	local itemLink = GetItemLink(bagId, slotId)
	local itemType = GetItemLinkItemType(itemLink)
	local itemId = GetItemLinkItemId(itemLink)

	if itemType == ITEMTYPE_INGREDIENT then
		if IngredientTable[itemId] and IngredientTable[itemId].itier == 0 then
			if GetIngredientSavedVar(itemId) == 0 then
				if destroyjunkingredients == true then
					if ESOMRL.ASV.aOpts.destroyunmarkedingredients == 1 then
						if stackCount <= maxjunkstack then
							if ignorestolen and IsItemLinkStolen(itemLink) then
								if debugmode == true then
									d('\''..stackCount..'x '..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_ISTOLENM)
								end
								return
							else
								DestroyItem(bagId, slotId)
								if debugmode == true then
									d('\''..stackCount..'x '..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_IDESTROYM)
								end
							end
						end
					end
				elseif destroyjunkingredients == false then
					if ESOMRL.ASV.aOpts.junkunmarkedingredients == 1 then
						if not IsItemJunk(bagId, slotId) then
							if stackCount <= maxjunkstack then
								if ignorestolen and IsItemLinkStolen(itemLink) then
									if debugmode == true then
										d('\''..stackCount..'x '..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_ISTOLENM)
									end
									return
								else
									SetItemIsJunk(bagId, slotId, true)
									if debugmode == true then
										d('\''..stackCount..'x '..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_IJUNKM)
									end
								end
							end
						end
					end
				end
			end
		end
	elseif itemType == ITEMTYPE_RECIPE then
		local function ProcessItem(nsId, nrId)
			local furniture = (FurnitureTable[nsId] ~= nil) and 1 or 0
			local quality = GetItemLinkQuality(itemLink)
			local checktracking = (furniture == 0) and GetRecipeSavedVar(nrId, 1) or GetRecipeSavedVar(nrId, 100)
			local linkDB = (furniture == 0) and ProvisioningTable or FurnitureTable

			if checktracking == 0 or checktracking == 3 then
				if destroyjunkrecipes == true then
					if ESOMRL.ASV.aOpts.destroyunmarkedrecipes == 1 then
						if quality < maxjunkquality then
							if ignorestolen and IsItemLinkStolen(itemLink) then
								if debugmode == true then
									d('\''..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_ISTOLENM)
								end
								return
							else
								DestroyItem(bagId, slotId)
								if debugmode == true then
									d('\''..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_IDESTROYM)
								end
							end
						end
					end
				elseif destroyjunkrecipes == false then
					if ESOMRL.ASV.aOpts.junkunmarkedrecipes == 1 then
						if not IsItemJunk(bagId, slotId) then
							if quality < maxjunkquality then
								if ignorestolen and IsItemLinkStolen(itemLink) then
									if debugmode == true then
										d('\''..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_ISTOLENM)
									end
									return
								else
									SetItemIsJunk(bagId, slotId, true)
									if debugmode == true then
										d('\''..LangFormat(GetItemLinkName(itemLink))..'\' '..L.ESOMRL_IJUNKM)
									end
								end
							end
						end
					end
				end
			end
		end

		if ProvisioningTable[itemId] or FurnitureTable[itemId] then
			local nrId = GetItemLinkItemId(GetItemLinkRecipeResultItemLink(itemLink))
			ProcessItem(itemId, nrId)
		elseif ProvisioningKeys[itemId] or FurnitureKeys[itemId] then -- this should account for situations of multiple recipes teaching the same thing
			local nrId = GetItemLinkItemId(GetItemLinkRecipeResultItemLink(itemLink))
			if ProvisioningKeys[itemId] then
				ProcessItem(ProvisioningKeys[itemId].ID, nrId)
			elseif FurnitureKeys[itemId] then
				ProcessItem(FurnitureKeys[itemId].ID, nrId)
			end
		end
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Setup addon hooks to facilitate its various functions
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function ItemIdentification(control, itemLink, gStore) -- categorize the item and send data to the tooltip processor
	local itemId = GetItemLinkItemId(itemLink)
	gStore = gStore and gStore or false
	if IngredientTable[itemId] then
		if itemId == 64221 then -- special case for psijic ambrosia as ingredient, may need table in future
			AddRecipeTooltipLine(control, itemId, itemLink, false, false, gStore)
		else
			AddIngredientTooltipLine(control, itemId)
		end
	else
		local itemType = GetItemLinkItemType(itemLink)
		if itemType == ITEMTYPE_RECIPE then
			if ProvisioningTable[itemId] then
				AddRecipeTooltipLine(control, itemId, itemLink, true, false, gStore)
			elseif FurnitureTable[itemId] then
				AddRecipeTooltipLine(control, itemId, itemLink, true, true, gStore)
			else -- this should account for situations of multiple recipes teaching the same thing
				local rLink = GetItemLinkRecipeResultItemLink(itemLink)
				local nrId = GetItemLinkItemId(rLink)
				if ProvisioningKeys[nrId] then
					AddRecipeTooltipLine(control, ProvisioningKeys[nrId].ID, itemLink, true, false, gStore)
				elseif FurnitureKeys[nrId] then
					AddRecipeTooltipLine(control, FurnitureKeys[nrId].ID, itemLink, true, true, gStore)
				end
			end
		elseif itemType == ITEMTYPE_FOOD or itemType == ITEMTYPE_DRINK or itemType == ITEMTYPE_FURNISHING then
			if ProvisioningKeys[itemId] then
				AddRecipeTooltipLine(control, itemId, itemLink, false, false, gStore)
			elseif FurnitureKeys[itemId] then
				AddRecipeTooltipLine(control, itemId, itemLink, false, true, gStore)
			end
		end
	end
end

local function HookTooltips()
	ZO_PostHook(ItemTooltip, "SetBagItem", function(control, bagId, slotIndex)
		local itemLink = GetItemLink(bagId, slotIndex)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(ItemTooltip, "SetLootItem", function(control, lootId)
		local itemLink = GetLootItemLink(lootId)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(ItemTooltip, "SetAttachedMailItem", function(control, mailId, attachmentIndex)
		local itemLink = GetAttachedItemLink(mailId, attachmentIndex)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(ItemTooltip, "SetBuybackItem", function(control, slotIndex)
		local itemLink = GetBuybackItemLink(slotIndex)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(ItemTooltip, "SetTradeItem", function(control, tradeId, slotIndex)
		local itemLink = GetTradeItemLink(slotIndex)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(ItemTooltip, "SetStoreItem", function(control, slotIndex)
		local itemLink = GetStoreItemLink(slotIndex)
		ItemIdentification(control, itemLink)
	end)
	ZO_PostHook(PopupTooltip, "SetLink", function(control, itemLink)
		ItemIdentification(control, itemLink)
	end)
end

local function AGSHooks()
	ZO_PostHook(ItemTooltip, "SetTradingHouseItem", function(control, tradingHouseIndex)
		local itemLink = GetTradingHouseSearchResultItemLink(tradingHouseIndex)
		ItemIdentification(control, itemLink, true)
	end)
	ZO_PostHook(ItemTooltip, "SetTradingHouseListing", function(control, tradingHouseListingIndex)
		local itemLink = GetTradingHouseListingItemLink(tradingHouseListingIndex)
		ItemIdentification(control, itemLink, true)
	end)
end

local function HookBags()
	for k,v in pairs(PLAYER_INVENTORY.inventories) do
		local listView = v.listView
		if ( listView and listView.dataTypes and listView.dataTypes[1] ) then
			ZO_PreHook(listView.dataTypes[1], "setupCallback", function(control, slot)
				local itemLink = GetItemLink(control.dataEntry.data.bagId, control.dataEntry.data.slotIndex, LINK_STYLE_BRACKETS)
				AddTrackingIndicator(control, nil, control.dataEntry.data.bagId, control.dataEntry.data.slotIndex, itemLink, RIGHT, 1)
			end)
		end
	end
end

local function HookTradeHouse(eventCode, responseType, result)
	ZO_PreHook(TRADING_HOUSE.searchResultsList.dataTypes[1], "setupCallback", function( ... )
		local control, data = ...
		if ( control.slotControlType and control.slotControlType == 'listSlot' and data.slotIndex ) then
			local itemLink = GetTradingHouseSearchResultItemLink(data.slotIndex, LINK_STYLE_BRACKETS)
			AddTrackingIndicator(control, nil, nil, nil, itemLink, RIGHT, 2)
		end
	end)
	ZO_PreHook(TRADING_HOUSE.postedItemsList.dataTypes[2], "setupCallback", function( ... )
		local control, data = ...
		if ( control.slotControlType and control.slotControlType == 'listSlot' and data.slotIndex ) then
			local itemLink = GetTradingHouseListingItemLink(data.slotIndex, LINK_STYLE_BRACKETS)
			AddTrackingIndicator(control, nil, nil, nil, itemLink, RIGHT, 3)
		end
	end)
end

local function HookBuyback( ... )
	ZO_PreHook(ZO_BuyBackList.dataTypes[1], "setupCallback", function( ... )
		local control, data = ...
		if ( control.slotControlType and control.slotControlType == 'listSlot' and data.slotIndex ) then
			local itemLink = GetBuybackItemLink(data.slotIndex, LINK_STYLE_BRACKETS)
			AddTrackingIndicator(control, nil, nil, nil, itemLink, RIGHT, 1)
		end
	end)
end

local function HookStation()

	-- These hooks handle coloring tracked/writ recipes and recipe categories by quality
	SecurePostHook("ZO_IconHeader_Setup", function(control, ...)
		if control.node and control.node.data and type(control.node.data) == 'table' and control.node.data.recipeListIndex then
			local sMode = GetCraftingInteractionType()
			if sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and (stationTab == 1 or stationTab == 2) then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 1)
			elseif sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and stationTab == 3 then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 2)
			elseif sDA[sMode] ~= nil then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 2)
			end
		end
	end)
	SecurePostHook("ZO_IconHeader_OnMouseEnter", function(control)
		if control.node and control.node.data and type(control.node.data) == 'table' and control.node.data.recipeListIndex then
			local sMode = GetCraftingInteractionType()
			if sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and (stationTab == 1 or stationTab == 2) then
				SetStationColors(control, 2, control.node.data.recipeListIndex, 1)
			elseif sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and stationTab == 3 then
				SetStationColors(control, 2, control.node.data.recipeListIndex, 2)
			elseif sDA[sMode] ~= nil then
				SetStationColors(control, 2, control.node.data.recipeListIndex, 2)
			end
		end
	end)
	SecurePostHook("ZO_IconHeader_OnMouseExit", function(control)
		if control.node and control.node.data and type(control.node.data) == 'table' and control.node.data.recipeListIndex then
			local sMode = GetCraftingInteractionType()
			if sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and (stationTab == 1 or stationTab == 2) then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 1)
			elseif sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and stationTab == 3 then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 2)
			elseif sDA[sMode] ~= nil then
				SetStationColors(control, 1, control.node.data.recipeListIndex, 2)
			end
		end
	end)
	local ESOMRL_ZO_ProvisionerRow_GetTextColor = ZO_ProvisionerRow_GetTextColor
	ZO_ProvisionerRow_GetTextColor = function(self)
		local descriptor = ZO_ProvisionerTopLevelTabs["m_object"]:GetSelectedDescriptor()

	--	if descriptor ~= nil then stationTab = descriptor end
		local sMode = GetCraftingInteractionType()
		if sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and (descriptor == 1 or descriptor == 2) then
			return SetWritColor(self, 1)
		elseif sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() and descriptor == 3 then
			return SetWritColor(self, 2)
		elseif sDA[sMode] ~= nil then
			return SetWritColor(self, 2)
		else
			if not self.enabled then
				return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_DISABLED)
			elseif self.selected then
				return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_SELECTED)
			elseif self.mouseover then
				return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_HIGHLIGHT)
			elseif self.meetsLevelReq and self.meetsQualityReq then
				return GetInterfaceColor(INTERFACE_COLOR_TYPE_TEXT_COLORS, INTERFACE_TEXT_COLOR_NORMAL)
			end
			return ZO_ERROR_COLOR:UnpackRGBA()
		end
	end

	-- Runs when the crafting station UI has been loaded 
	ZO_PreHook(ZO_Provisioner, "StartInteract", function(self, ...)
		StationControl = self -- Store the station control for interactive use elsewhere.

	--	local checkDesc = self.filterType
	--	if checkDesc ~= nil then stationTab = checkDesc end
		if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() then
			stationMode = CRAFTING_TYPE_PROVISIONING

			if ESOMRL.ASV.aOpts.noFilters == true then -- Auto-uncheck filters on cooking station startup.
				self.savedVars.haveIngredientsChecked = false
				self.savedVars.haveSkillsChecked = false
				self.savedVars.questsOnlyChecked = false
				ZO_CheckButton_SetCheckState(self.haveIngredientsCheckBox, false)
				ZO_CheckButton_SetCheckState(self.haveSkillsCheckBox, false)
				ZO_CheckButton_SetCheckState(self.isQuestItemCheckbox, false)
			else -- set manual station filter overrides
				local ingFilter = ESOMRL.ASV.aOpts.ingFilter
				local skillFilter = ESOMRL.ASV.aOpts.skillFilter
				local questFilter = ESOMRL.ASV.aOpts.questFilter
				local varTable = {[1] = true, [2] = false}
				if ingFilter ~= 3 then
					self.savedVars.haveIngredientsChecked = varTable[ingFilter]
					ZO_CheckButton_SetCheckState(self.haveIngredientsCheckBox, varTable[ingFilter])
				end
				if skillFilter ~= 3 then
					self.savedVars.haveSkillsChecked = varTable[skillFilter]
					ZO_CheckButton_SetCheckState(self.haveSkillsCheckBox, varTable[skillFilter])
				end
				if questFilter ~= 3 then
					self.savedVars.questsOnlyChecked = varTable[questFilter]
					ZO_CheckButton_SetCheckState(self.isQuestItemCheckbox, varTable[questFilter])
				end
			end
			zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
		end
	end)

	-- Close open categories and clear selection when changing tabs
	SecurePostHook(ZO_Provisioner, "OnTabFilterChanged", function(self, filterData)
		if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore() then
			stationTab = filterData.descriptor
			if stationTab and (provOpen) then lastProv = ESOMRL.DB.ProvisionerTabs[stationTab] end
		end
		SetSortOrder(4)
		statNodes = {}
		StationControl = self
		ClearStationSelection()
	end)

	-- Option to sort individual cooking recipes by level or alphabetically
	SecurePostHook(PROVISIONER_MANAGER, "BuildRecipeListData", function(self, ...)
		local function SortByLevel(left, right)
			if (ESOMRL.ASV.aOpts.sortAscending) then
				return tostring(left.maxLevel)..left.name < tostring(right.maxLevel)..right.name
			else
				return tostring(left.maxLevel)..left.name > tostring(right.maxLevel)..right.name
			end
		end
		local icons = { -- used to only do level-based sorting for cooking recipes that have a level range
			["/esoui/art/treeicons/provisioner_indexicon_stew_over.dds"] = true,
			["/esoui/art/treeicons/provisioner_indexicon_meat_over.dds"] = true,
			["/esoui/art/treeicons/provisioner_indexicon_baked_over.dds"] = true,
			["/esoui/art/treeicons/provisioner_indexicon_beer_over.dds"] = true,
			["/esoui/art/treeicons/provisioner_indexicon_wine_over.dds"] = true,
			["/esoui/art/treeicons/provisioner_indexicon_spirits_over.dds"] = true,
		}
		for i = 1, #self.recipeLists do
			if self.recipeLists and self.recipeLists[i] and self.recipeLists[i].overIcon then
				if icons[self.recipeLists[i].overIcon] and (ESOMRL.ASV.aOpts.sortByLevel) then
					for k, v in pairs(self.recipeLists[i].recipes) do
						local resultId = v.resultItemId
						local itemLink = string.format("|H0:item:%d:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0|h|h", resultId)
						local _, _, _, _, _, _, maxLevel = GetItemLinkOnUseAbilityInfo(itemLink)
						self.recipeLists[i].recipes[k].maxLevel = maxLevel
					end
					table.sort(self.recipeLists[i].recipes, SortByLevel)
				end
			end
		end
	end)

	-- Prevent auto-opening any recipe categories you didn't open when station first loads
	ZO_PreHook("ZO_IconHeader_Setup", function(self, ...)
		local sMode = GetCraftingInteractionType()
		if ((sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore()) or sDA[sMode] ~= nil) then
			if self.node and self.node.tree then
				local treeNode = self.node.tree
				if treeNode.control and treeNode.control:GetName() == "ZO_ProvisionerTopLevelNavigationContainerScrollChild" then
					if treeNode.exclusive or treeNode.open then
						treeNode.exclusive = false
						treeNode.open = false
					end
				end
			end
		end
	end)

	-- Track when on the furniture creation tab at crafting stations to show the MRL panel
	ZO_PreHook(ZO_Smithing, "SetMode", function(self, mode)
		if mode == 6 then
			local controlName = ZO_SmithingTopLevelModeMenu
			if ESOMRL:IsHidden() then
				ShowStationControls(controlName, -64, -128)
			end
		else
			ESOMRL:SetHidden(true)
		end
		stationTab = mode
		stationMode = GetCraftingInteractionType()
	end)
	ZO_PreHook(ZO_Enchanting, "OnModeUpdated", function(self)
		if self.enchantingMode == 3 then
			local controlName = ZO_EnchantingTopLevelModeMenu
			if ESOMRL:IsHidden() then
				ShowStationControls(controlName, -64, -128)
			end
		else
			ESOMRL:SetHidden(true)
		end
		stationTab = self.enchantingMode
		stationMode = GetCraftingInteractionType()
	end)
	ZO_PreHook(ZO_Alchemy, "UpdateTooltip", function(self)
		if self.mode == 2 then
			local controlName = ZO_AlchemyTopLevelModeMenu
			if ESOMRL:IsHidden() then
				ShowStationControls(controlName, -64, -128)
			end
		else
			ESOMRL:SetHidden(true)
		end
		stationTab = self.mode
		stationMode = GetCraftingInteractionType()
	end)

	-- Runs when a recipe category is clicked
	ZO_PreHook("ZO_TreeHeader_OnMouseUp", function(self, upInside)
		if self.node and self.node.data and type(self.node.data) == 'table' and self.node.data.recipeListIndex and self.node.data.name then
			local sMode = GetCraftingInteractionType()
			if ((sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore()) or sDA[sMode] ~= nil) and upInside then
				local treeNode = {tnode = self}
				local name = LowerSpaceSpecial(self.node.data.name)
				local recipeListIndex = self.node.data.recipeListIndex
				if self.node.open == false then -- keep track of open categories so we can manually close them
					if statNodes[name] == nil then
						statNodes[name] = treeNode
					end
				else
					statNodes[name] = nil
				end
				if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING and (not CheckCraftStore()) then
					writAnim = false -- wait for the open category animation to finish before scrolling to active writ
					if recipeListIndex > 0 and recipeListIndex < 17 then
						if self.node.open == false then
							local writ = writList[recipeListIndex].writ
							if writ ~= 0 then
								local sCon
								local listContent = self.node.children
								for k, v in pairs(listContent) do
									if listContent[k].data.recipeIndex == writ then
										sCon = listContent[k].control.node
									end
								end
								-- hack to select and scroll to un-crafted writ items if they exist on opening a category
								-- have to wait as running commands before letting the tree finish it's animation seems to prevent it from happening.
								if sCon then
									writNode = self.node.tree
									writCon = sCon
									writAnim = true
									if writNode then
										ZO_PreHook(self.node.tree, "OnOpenAnimationStopped", function()
											if writAnim then
												writNode:SelectNode(writCon)
												writNode:SetScrollToTargetNode(writCon)
											end
										end)
									end
								end
							end
						end
					end
				end
			end
		end
	end)

	-- Runs when a recipe name is clicked
	ZO_PreHook("ZO_TreeEntry_OnMouseUp", function(self, upInside)
		if self.node and self.node.data and type(self.node.data) == 'table' and self.node.data.recipeListIndex and self.node.data.recipeIndex then
			local sMode = GetCraftingInteractionType()
			if ((sMode == CRAFTING_TYPE_PROVISIONING and not CheckCraftStore()) or sDA[sMode] ~= nil) and upInside then
				local recipeListIndex = self.node.data.recipeListIndex
				local recipeIndex = self.node.data.recipeIndex
				local name, icon = GetRecipeResultItemInfo(recipeListIndex, recipeIndex)
				stationSelect = LangFormat(name) -- Store the selected recipe name for searching MRL.
				if stationMode == CRAFTING_TYPE_ENCHANTING and stationTab == 3 then
					UpdateStationTooltip()
				elseif stationMode == CRAFTING_TYPE_ALCHEMY and stationTab == 2 then
					UpdateStationTooltip()
				elseif GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING then
					local descriptor = ZO_ProvisionerTopLevelTabs["m_object"]:GetSelectedDescriptor()
					if (not CheckCraftStore()) and (descriptor == 1 or descriptor == 2) then
						UpdateStationTooltip()
					end
				elseif stationTab == 6 then
					UpdateStationTooltip()
				end
			end
		end
	end)

	-- Hackish method of hooking the new trade house scroll list creation for initial tracking icon population
	ZO_PreHook("ZO_ScrollList_Commit", function(list)
		if ZO_TradingHouseSearch:IsAtTradingHouse() and searchBuffer == 0 then
			searchBuffer = 1 -- this just prevents multiple calls from return spam
			zo_callLater(function() RefreshViews() searchBuffer = 0 end, 200)
		end
	end)

	-- Hooks for the vendor store view with support for realtime updates
	ZO_PreHook(ZO_StoreManager, "SetUpBuySlot", function( ... )
		local self, control, data = ...
		local slotIndex = data.slotIndex
		local itemLink = GetStoreItemLink(slotIndex)
		local slotControl = GetControl(control, "Button")
		local nameControl = GetControl(control, "Name")
		if InventoryGridView then -- special case support for Inventory Grid View
			if InventoryGridView.settings.IsGrid(6) then
				AddTrackingIndicator(slotControl, nameControl, nil, slotIndex, itemLink, RIGHT, 4)
			else
				AddTrackingIndicator(nameControl, slotControl, nil, slotIndex, itemLink, RIGHT, 4)
			end
		elseif GridList then -- special case support for Grid List
			if GridList_SV.Default[GetDisplayName()]["$AccountWide"][8] ~= 1 then
				AddTrackingIndicator(slotControl, nameControl, nil, slotIndex, itemLink, RIGHT, 4)
			else
				AddTrackingIndicator(nameControl, slotControl, nil, slotIndex, itemLink, RIGHT, 4)
			end
		else
			AddTrackingIndicator(nameControl, slotControl, nil, slotIndex, itemLink, RIGHT, 4)
		end
	end)
	ZO_PreHook(ZO_StoreManager, "UpdateList", function(self)
		storeList = self.list -- grab the current store inventory scroll list necessary to update in realtime
	end)
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Generate the popup list tooltips
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function ListTooltips(control, text, option)
	local RecipeItemTooltip = RecipeItemTooltipControl
	if option == 1 then
		if ESOMRL.ASV.aOpts.lttshow == 1 then
			for i = 1, #searchTable do
				local tID = searchTable[i].ID
				local name = searchTable[i].text
				if text == name then
					local itemlink
					if setMode == 1 then
						if ESOMRL.ASV.aOpts.tooltipstyle == 0 then
							itemLink = ProvisioningTable[tID].link
						elseif ESOMRL.ASV.aOpts.tooltipstyle == 1 then
							itemLink = ProvisioningTable[tID].item
						end
					else
						if ESOMRL.ASV.aOpts.tooltipstyle == 0 then
							itemLink = FurnitureTable[tID].link
						elseif ESOMRL.ASV.aOpts.tooltipstyle == 1 then
							itemLink = FurnitureTable[tID].item
						end
					end
					InitializeTooltip(RecipeItemTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
					PopupTooltip.SetLink(RecipeItemTooltip, itemLink)
				end
			end
		end
		control:SetAlpha(.5)
	elseif option == 2 then
		ClearTooltip(RecipeItemTooltip)
		control:SetAlpha(1)
	end
end

local function SelectTooltipStyle(option)
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		if ESOMRL.ASV.aOpts.tooltipstyle == 0 then
			SetTooltipText(InformationTooltip, L.ESOMRL_TTFOOD)
		elseif ESOMRL.ASV.aOpts.tooltipstyle == 1 then
			SetTooltipText(InformationTooltip, L.ESOMRL_TTRECIPE)
		end
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	elseif option == 3 then
		if ESOMRL.ASV.aOpts.tooltipstyle == 0 then
			ESOMRL.ASV.aOpts.tooltipstyle = 1
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_TTRECIPE)
		elseif ESOMRL.ASV.aOpts.tooltipstyle == 1 then
			ESOMRL.ASV.aOpts.tooltipstyle = 0
			ClearTooltip(InformationTooltip)
			InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
			SetTooltipText(InformationTooltip, L.ESOMRL_TTFOOD)
		end
	end
end

local function StationButtonTooltip(control, option)
	if option == 1 then
		InitializeTooltip(InformationTooltip, control, BOTTOMLEFT, 0, -11, TOPRIGHT)
		SetTooltipText(InformationTooltip, "Master Recipe List")
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end
end

local function QualityTooltips(tier, option)
	local text = ''
	if tier == 1 then
		text = L.ESOMRL_RANK1
	elseif tier == 2 then
		text = L.ESOMRL_RANK2
	elseif tier == 3 then
		text = L.ESOMRL_RANK3
	elseif tier == 4 then
		text = L.ESOMRL_RANK4
	elseif tier == 5 then
		text = L.ESOMRL_RANK5
	elseif tier == 6 then
		text = L.ESOMRL_RANK6
	end
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, text)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end
end

local function TrackShownTooltips(option)
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, L.ESOMRL_TRACKSHOWN)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end
end

local function SpecialRecipeTooltips(n1, option)
	local text = ''
	if n1 == 1 then
		text = L.ESOMRL_PSIJIC
	elseif n1 == 2 then
		text = L.ESOMRL_ORSINIUM
	elseif n1 == 3 then
		text = L.ESOMRL_WITCHFEST
	elseif n1 == 4 then
		text = L.ESOMRL_NLFEST
	elseif n1 == 5 then
		text = L.ESOMRL_JESTFEST
	elseif n1 == 6 then
		text = L.ESOMRL_CLOCKWORK
	end
	if option == 1 then
		InitializeTooltip(InformationTooltip, ESOMRL_MainFrameCloseButton, TOPLEFT, 8, -44, BOTTOMRIGHT)
		SetTooltipText(InformationTooltip, text)
	elseif option == 2 then
		ClearTooltip(InformationTooltip)
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Text search mouse events
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function TextBoxEvents(option)
	local control = ESOMRL_MainFrameListFrameSearchBox
	local controlBG = ESOMRL_MainFrameListFrameSearchBG
	if option == 1 then -- On Mouse Enter
		if editText == 0 or editText == 2 then
			controlBG:SetAlpha(0.5)
			if textInput == '' then
				control:SetText(L.ESOMRL_SEARCHBOX)
			else
				control:SetText(textInput)
			end
		end
	elseif option == 2 then -- On Mouse Exit
		if editText == 0 or editText == 2 then
			controlBG:SetAlpha(0)
			if control:GetText() == L.ESOMRL_SEARCHBOX then
				textInput = L.ESOMRL_SEARCHBOX
			end
			control:SetText('')
		end
	elseif option == 3 then -- On Focus Gained
		control:SetText('')
		textInput = ''
		editText = 1
		openTab = 50
		TextSearch()
	elseif option == 4 then -- On Focus Lost
		editText = 0
		textInput = control:GetText()
		control:SetText('')
		controlBG:SetAlpha(0)
		TextSearch(1)
	elseif option == 5 then -- On Text Changed
		if textInput ~= L.ESOMRL_SEARCHBOX and control:GetText() ~= L.ESOMRL_SEARCHBOX then
			TextSearch()
		end
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Set up the Addon Settings options panel
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function CreateSettingsWindow(addonName)
	local panelData = {
		type					= 'panel',
		name					= 'ESO Master Recipe List',
		displayName				= pTC("FEE854","ESO")..' '..pTC("FF9900","Master Recipe List"),
		author					= pTC("66ccff","Phinix"),
		version					= version,
		registerForRefresh		= true,
		registerForDefaults		= true,
	}

	local optionsData = {
		{
			type			= 'submenu',
			name			= L.ESOMRL_CHAROPT,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= L.ESOMRL_ETRACKING,
							tooltip			= L.ESOMRL_TRACKDESC,
							getFunc			= function() return ESOMRL.CSV.cOpts.trackChar end,
							setFunc			= function(value)
												ESOMRL.CSV.cOpts.trackChar = value
												SetupCharacters()
												InitKnown()
												ReloadUI()
											end,
							default			= cDefaults.trackChar,
						},
						[2] = {
							type = 'description',
							text = L.ESOMRL_TRACKWARN,
						},
			},
		},
		{
			type = "header",
			name = ZO_HIGHLIGHT_TEXT:Colorize(L.ESOMRL_GLOBALOPT),
		},
		{
			type			= 'submenu',
			name			= L.ESOMRL_TCOPT,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVENTORYI,
							tooltip			= L.ESOMRL_INVENTORYD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryicons end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryicons = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryicons,
						},
						[2] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVTOOLTIP,
							tooltip			= L.ESOMRL_INVTOOLTIPD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryIT end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryIT = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryIT,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[3] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVTEXTICONS,
							tooltip			= L.ESOMRL_INVTEXTICONSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryTI end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryTI = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryTI,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[4] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVTRACK,
							tooltip			= L.ESOMRL_INVTRACKD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryT end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryT = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryT,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[5] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVWRIT,
							tooltip			= L.ESOMRL_INVWRITD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryW end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryW = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryW,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[6] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVCHARU,
							tooltip			= L.ESOMRL_INVCHARUD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryCU end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryCU = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryCU,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and ESOMRL.CSV.cOpts.trackChar) end,
						},
						[7] = {
							type			= 'checkbox',
							name			= L.ESOMRL_INVCHARK,
							tooltip			= L.ESOMRL_INVCHARKD,
							getFunc			= function() return ESOMRL.ASV.aOpts.inventoryCK end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.inventoryCK = value
												RefreshViews()
											end,
							default			= aDefaults.inventoryCK,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and ESOMRL.CSV.cOpts.trackChar) end,
						},
						[8] = {
							type			= 'checkbox',
							name			= L.ESOMRL_TCHART,
							tooltip			= L.ESOMRL_TCHARTD,
							getFunc			= function() return ESOMRL.ASV.aOpts.tchart end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.tchart = value end,
							default			= aDefaults.tchart,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and #charNamesOPT > 0) end,
						},
						[9] = {
							type			= 'dropdown',
							name			= L.ESOMRL_TCHAR,
							tooltip			= L.ESOMRL_TCHARD,
							choices			= charNamesOPT,
							getFunc			= function()
												if ESOMRL.ASV.aOpts.foodtrackingchar == '' or not pCO(charNamesOPT, charIDName[ESOMRL.ASV.aOpts.foodtrackingchar]) then
													if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
														ESOMRL.ASV.aOpts.foodtrackingchar = tostring(GetCurrentCharacterId())
													elseif #charNamesOPT > 0 then
														return charNamesOPT[1]
													end
												end
												return charIDName[ESOMRL.ASV.aOpts.foodtrackingchar]
											end,
							setFunc			= function(selected)
												for k,v in pairs(charIDName) do
													if v == selected then
														ESOMRL.ASV.aOpts.foodtrackingchar = k
														break
													end
												end
												RefreshViews()
											end,
							default			= aDefaults.foodtrackingchar,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and ESOMRL.ASV.aOpts.tchart) end,
						},
						[10] = {
							type			= 'dropdown',
							name			= L.ESOMRL_FTCHAR,
							tooltip			= L.ESOMRL_FTCHARD,
							choices			= charNamesOPT,
							getFunc			= function()
												if ESOMRL.ASV.aOpts.furntrackingchar == '' or not pCO(charNamesOPT, charIDName[ESOMRL.ASV.aOpts.furntrackingchar]) then
													if MasterRecipeList[worldName][accountName][tostring(GetCurrentCharacterId())].CharacterSettings.cOpts.trackChar == true then
														ESOMRL.ASV.aOpts.furntrackingchar = tostring(GetCurrentCharacterId())
													elseif #charNamesOPT > 0 then
														return charNamesOPT[1]
													end
												end
												return charIDName[ESOMRL.ASV.aOpts.foodtrackingchar]
											end,
							setFunc			= function(selected)
												for k,v in pairs(charIDName) do
													if v == selected then
														ESOMRL.ASV.aOpts.furntrackingchar = k
														break
													end
												end
												RefreshViews()
											end,
							default			= aDefaults.furntrackingchar,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and ESOMRL.ASV.aOpts.tchart) end,
						},
						[11] = {
							type			= 'checkbox',
							name			= L.ESOMRL_ALTIU,
							tooltip			= L.ESOMRL_ALTIUD,
							getFunc			= function() return ESOMRL.ASV.aOpts.tchartK end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.tchartK = value
												RefreshViews()
											end,
							default			= aDefaults.tchartK,
							disabled		= function() return not (ESOMRL.ASV.aOpts.inventoryicons and ESOMRL.ASV.aOpts.tchart) end,
						},
						[12] = {
							type			= 'slider',
							name			= L.ESOMRL_ICONPOSI,
							tooltip			= L.ESOMRL_ICONPOSID,
							min				= -380,
							max				= 145,
							step			= 1,
							getFunc			= function() return ESOMRL.ASV.aOpts.bagiconoffset end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.bagiconoffset = value
												RefreshViews()
											end,
							default			= aDefaults.bagiconoffset,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[13] = {
							type			= 'slider',
							name			= L.ESOMRL_ICONPOSS,
							tooltip			= L.ESOMRL_ICONPOSSD,
							min				= -380,
							max				= 145,
							step			= 1,
							getFunc			= function() return ESOMRL.ASV.aOpts.storeiconoffset end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.storeiconoffset = value
												RefreshViews()
											end,
							default			= aDefaults.storeiconoffset,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[14] =  {
							type			= 'slider',
							name			= L.ESOMRL_ICONPOSB,
							tooltip			= L.ESOMRL_ICONPOSBD,
							min				= -30,
							max				= 145,
							step			= 1,
							getFunc			= function() return ESOMRL.ASV.aOpts.gstoreiconoffset end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.gstoreiconoffset = value
												RefreshViews()
											end,
							default			= aDefaults.gstoreiconoffset,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
						[15] =  {
							type			= 'slider',
							name			= L.ESOMRL_ICONPOSL,
							tooltip			= L.ESOMRL_ICONPOSLD,
							min				= -30,
							max				= 145,
							step			= 1,
							getFunc			= function() return ESOMRL.ASV.aOpts.glistingiconoffset end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.glistingiconoffset = value
												RefreshViews()
											end,
							default			= aDefaults.glistingiconoffset,
							disabled		= function() return not ESOMRL.ASV.aOpts.inventoryicons end,
						},
			},
		},
		{
			type			= 'submenu',
			name			= L.ESOMRL_TIOPT,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWKNOWN,
							tooltip			= L.ESOMRL_SHOWKNOWND,
							getFunc			= function() return ESOMRL.ASV.aOpts.known end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.known = value end,
							width			= 'full',
							default			= aDefaults.known,
						},
						[2] = {
							type			= "checkbox",
							name			= L.ESOMRL_ALPHAN,
							tooltip			= L.ESOMRL_ALPHAND,
							getFunc			= function() return ESOMRL.ASV.aOpts.sortAlpha end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.sortAlpha = value SetupCharacters() end,
							width			= "full",
							default			= aDefaults.sortAlpha,
						},
						[3] = {
							type			= 'dropdown',
							name			= L.ESOMRL_SKDROPDOWN,
							tooltip			= L.ESOMRL_SKDROPDOWND,
							choices			= stringOpts,
							getFunc			= function() return stringOpts[ESOMRL.ASV.aOpts.kSformat] end,
							setFunc			= function(selected)
												for k,v in ipairs(stringOpts) do
													if v == selected then
														ESOMRL.ASV.aOpts.kSformat = k
														break
													end
												end
											end,
							default			= stringOpts[aDefaults.kSformat],
							disabled		= function() return not ESOMRL.ASV.aOpts.known end,
						},
						[4] = {
							type			= "colorpicker",
							name			= L.ESOMRL_SKCOLORK,
							tooltip			= L.ESOMRL_SKCOLORKD,
							getFunc			= function() return unpack(ESOMRL.ASV.aOpts.ttcolorkT) end,
							setFunc			= function(r, g, b, a)
												ESOMRL.ASV.aOpts.ttcolorkT = { r, g, b, a }
												ESOMRL.ASV.aOpts.ttcolork = pR2(ESOMRL.ASV.aOpts.ttcolorkT)
											end,
							width			= "full",
							default			= {r=ESOMRL.ASV.aOpts.ttcolorkT[1], g=ESOMRL.ASV.aOpts.ttcolorkT[2], b=ESOMRL.ASV.aOpts.ttcolorkT[3]},
						},
						[5] = {
							type			= "colorpicker",
							name			= L.ESOMRL_SKCOLORU,
							tooltip			= L.ESOMRL_SKCOLORUD,
							getFunc			= function() return unpack(ESOMRL.ASV.aOpts.ttcoloruT) end,
							setFunc			= function(r, g, b, a)
												ESOMRL.ASV.aOpts.ttcoloruT = { r, g, b, a }
												ESOMRL.ASV.aOpts.ttcoloru = pR2(ESOMRL.ASV.aOpts.ttcoloruT)
											end,
							width			= "full",
							default			= {r=ESOMRL.ASV.aOpts.ttcoloruT[1], g=ESOMRL.ASV.aOpts.ttcoloruT[2], b=ESOMRL.ASV.aOpts.ttcoloruT[3]},
						},
						[6] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWFURNC,
							tooltip			= L.ESOMRL_SHOWFURNCD,
							getFunc			= function() return ESOMRL.ASV.aOpts.furnCats end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.furnCats = value end,
							width			= 'full',
							default			= aDefaults.furnCats,
						},
						[7] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWINGRECS,
							tooltip			= L.ESOMRL_SHOWINGRECSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.ingrecs end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ingrecs = value end,
							width			= 'full',
							default			= aDefaults.ingrecs,
						},
						[8] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWINGFOOD,
							tooltip			= L.ESOMRL_SHOWINGFOODD,
							getFunc			= function() return ESOMRL.ASV.aOpts.ingfood end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ingfood = value end,
							width			= 'full',
							default			= aDefaults.ingfood,
						},
						[9] = {
							type			= 'checkbox',
							name			= L.ESOMRL_COLORING,
							tooltip			= L.ESOMRL_COLORINGD,
							getFunc			= function() return ESOMRL.ASV.aOpts.ingcolors end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ingcolors = value end,
							width			= 'full',
							default			= aDefaults.ingcolors,
						},
						[10] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWINGRECSGS,
							tooltip			= L.ESOMRL_SHOWINGRECSGSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.ingrecsgs end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ingrecsgs = value end,
							width			= 'full',
							default			= aDefaults.ingrecsgs,
							disabled		= function() return not ESOMRL.ASV.aOpts.ingrecs end,
						},
						[11] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SHOWINGFOODGS,
							tooltip			= L.ESOMRL_SHOWINGFOODGSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.ingfoodgs end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ingfoodgs = value end,
							width			= 'full',
							default			= aDefaults.ingfoodgs,
							disabled		= function() return not ESOMRL.ASV.aOpts.ingfood end,
						},
			},
		},
		{
			type			= 'submenu',
			name			= L.ESOMRL_ADOPT,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= pTC("ff0000",L.ESOMRL_RDESTROY),
							tooltip			= L.ESOMRL_RDESTDESC,
							getFunc			= function() return ESOMRL.ASV.aOpts.destroyjunkrecipes end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
												ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
												ESOMRL.ASV.aOpts.destroyjunkrecipes = value
												RecipePanelSetup()
											end,
							warning			= L.ESOMRL_RDESTROYWARN,
							default			= aDefaults.destroyjunkrecipes,
						},
						[2] = {
							type			= 'checkbox',
							name			= pTC("ff0000",L.ESOMRL_IDESTROY),
							tooltip			= L.ESOMRL_IDESTDESC,
							getFunc			= function() return ESOMRL.ASV.aOpts.destroyjunkingredients end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.junkunmarkedingredients = 0
												ESOMRL.ASV.aOpts.destroyunmarkedingredients = 0
												ESOMRL.ASV.aOpts.destroyjunkingredients = value
												IngredientPanelSetup()
											end,
							warning			= L.ESOMRL_IDESTROYWARN,
							default			= aDefaults.destroyjunkingredients,
						},
						[3] = {
							type			= 'description',
							title			= L.ESOMRL_IDESTNOTE,
							text			= L.ESOMRL_IDESTNOTED,
						},
						[4] = {
							type			= 'checkbox',
							name			= pTC("00ff00",L.ESOMRL_ISTOLEN),
							tooltip			= L.ESOMRL_ISTOLEND,
							getFunc			= function() return ESOMRL.ASV.aOpts.ignorestolen end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.ignorestolen = value end,
							default			= aDefaults.ignorestolen,
						},
						[5] = {
							type			= 'checkbox',
							name			= pTC("ffff00",L.ESOMRL_DEBUGMODE),
							tooltip			= L.ESOMRL_DEBUGDESC,
							getFunc			= function() return ESOMRL.ASV.aOpts.debugmode end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.debugmode = value end,
							default			= aDefaults.debugmode,
						},
						[6] = {
							type			= 'dropdown',
							name			= L.ESOMRL_DQUALITY,
							tooltip			= L.ESOMRL_DQUALITYDESC,
							choices			= qualityCap,
							getFunc			= function() return qualityCap[ESOMRL.ASV.aOpts.maxjunkquality - 1] end,
							setFunc			= function(selected)
												for k,v in ipairs(qualityCap) do
													if v == selected then
														ESOMRL.ASV.aOpts.maxjunkquality = k + 1
														break
													end
												end
											end,
							default			= qualityCap[aDefaults.maxjunkquality],
						},
						[7] = {
							type			= 'slider',
							name			= L.ESOMRL_STACKSIZE,
							tooltip			= L.ESOMRL_STACKDESC,
							min				= 1,
							max				= 100,
							step			= 1,
							getFunc			= function() return ESOMRL.ASV.aOpts.maxjunkstack end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.maxjunkstack = value end,
							default			= aDefaults.maxjunkstack,
						},
			},
		},
		{
			type			= 'submenu',
			name			= L.ESOMRL_CSOPT,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= L.ESOMRL_AUTOWRITS,
							tooltip			= L.ESOMRL_AUTOWRITSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.autoWrits end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.autoWrits = value end,
							width			= 'full',
							default			= aDefaults.autoWrits,
						},
						[2] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SORTBYLEVEL,
							tooltip			= L.ESOMRL_SORTBYLEVELD,
							getFunc			= function() return ESOMRL.ASV.aOpts.sortByLevel end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.sortByLevel = value end,
							width			= 'full',
							default			= aDefaults.sortByLevel,
						},
						[3] = {
							type			= 'checkbox',
							name			= L.ESOMRL_OPCONTROL,
							tooltip			= L.ESOMRL_OPCONTROLD,
							getFunc			= function() return ESOMRL.ASV.aOpts.opControls end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.opControls = value end,
							width			= 'full',
							default			= aDefaults.opControls,
						},
						[4] = {
							type			= 'checkbox',
							name			= L.ESOMRL_NOFILTERS,
							tooltip			= L.ESOMRL_NOFILTERSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.noFilters end,
							setFunc			= function(value) ESOMRL.ASV.aOpts.noFilters = value end,
							width			= 'full',
							default			= aDefaults.noFilters,
						},
						[5] = {
							type			= 'dropdown',
							name			= L.ESOMRL_INGFILTER,
							tooltip			= L.ESOMRL_INGFILTERD,
							choices			= filterOpts,
							getFunc			= function() return filterOpts[ESOMRL.ASV.aOpts.ingFilter] end,
							setFunc			= function(selected)
												for k,v in ipairs(filterOpts) do
													if v == selected then
														ESOMRL.ASV.aOpts.ingFilter = k
														break
													end
												end
											end,
							default			= filterOpts[aDefaults.ingFilter],
							disabled		= function() return ESOMRL.ASV.aOpts.noFilters end,
						},
						[6] = {
							type			= 'dropdown',
							name			= L.ESOMRL_SKILLFILTER,
							tooltip			= L.ESOMRL_SKILLFILTERD,
							choices			= filterOpts,
							getFunc			= function() return filterOpts[ESOMRL.ASV.aOpts.skillFilter] end,
							setFunc			= function(selected)
												for k,v in ipairs(filterOpts) do
													if v == selected then
														ESOMRL.ASV.aOpts.skillFilter = k
														break
													end
												end
											end,
							default			= filterOpts[aDefaults.skillFilter],
							disabled		= function() return ESOMRL.ASV.aOpts.noFilters end,
						},
						[7] = {
							type			= 'dropdown',
							name			= L.ESOMRL_QUESTFILTER,
							tooltip			= L.ESOMRL_QUESTFILTERD,
							choices			= filterOpts,
							getFunc			= function() return filterOpts[ESOMRL.ASV.aOpts.questFilter] end,
							setFunc			= function(selected)
												for k,v in ipairs(filterOpts) do
													if v == selected then
														ESOMRL.ASV.aOpts.questFilter = k
														break
													end
												end
											end,
							default			= filterOpts[aDefaults.questFilter],
							disabled		= function() return ESOMRL.ASV.aOpts.noFilters end,
						},
						[8] = {
							type			= 'dropdown',
							name			= L.ESOMRL_DEFAULTPTAB,
							tooltip			= L.ESOMRL_DEFAULTPTABD,
							choices			= stationTabs,
							getFunc			= function() return stationTabs[ESOMRL.ASV.aOpts.tabSelect] end,
							setFunc			= function(selected)
												for k,v in ipairs(stationTabs) do
													if v == selected then
														ESOMRL.ASV.aOpts.tabSelect = k
														break
													end
												end
											end,
							default			= stationTabs[aDefaults.tabSelect],
						},
						[9] = {
							type			= 'checkbox',
							name			= L.ESOMRL_SSTATS,
							tooltip			= L.ESOMRL_SSTATSD,
							getFunc			= function() return ESOMRL.ASV.aOpts.stationstats end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.stationstats = value
											end,
							default			= aDefaults.stationstats,
						},
						[10] = {
							type			= 'iconpicker',
							name			= L.ESOMRL_SSTATICONS,
							tooltip			= L.ESOMRL_SSTATICONSD,
							choices			= DB.StatOptions,
							choicesTooltips	= DB.StatOptionTooltips,
							getFunc			= function() return DB.StatOptions[ESOMRL.ASV.aOpts.stationicons] end,
							setFunc			= function(texturePath)
												local textureId = GetTextureId(texturePath)
												if textureId ~= 0 then
													ESOMRL.ASV.aOpts.stationicons = textureId
													SwitchStationIcons(textureId)
												end
											end,
							maxColumns		= 2,
							visibleRows		= 1,
							iconSize		= 64,
							default			= DB.StatOptions[aDefaults.stationicons],
							disabled		= function() return not ESOMRL.ASV.aOpts.stationstats end,
						},
			},
		},
		{
			type			= 'submenu',
			name			= L.ESOMRL_ADDONS,
			controls		= {
						[1] = {
							type			= 'checkbox',
							name			= L.ESOMRL_FCOUNKNOWN,
							tooltip			= L.ESOMRL_FCOUNKNOWND,
							getFunc			= function() return ESOMRL.ASV.aOpts.fcoitemsaverU end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.fcoitemsaverU = value
												RefreshViews()
											end,
							default			= aDefaults.fcoitemsaverU,
							disabled		= function() return not (FCOItemSaverActive and ESOMRL.ASV.aOpts.tchart) end,
							
						},
						[2] = {
							type			= 'checkbox',
							name			= L.ESOMRL_FCOUNKNOWNCO,
							tooltip			= L.ESOMRL_FCOUNKNOWNCOD,
							getFunc			= function() return ESOMRL.CSV.cOpts.fcoitemsaverCO end,
							setFunc			= function(value)
												ESOMRL.CSV.cOpts.fcoitemsaverCO = value
												RefreshViews()
											end,
							default			= cDefaults.fcoitemsaverCO,
							disabled		= function() return not FCOItemSaverActive end,
						},
						[3] = {
							type			= 'checkbox',
							name			= L.ESOMRL_FCOITEM,
							tooltip			= L.ESOMRL_FCOITEMD,
							getFunc			= function() return ESOMRL.ASV.aOpts.fcoitemsaverT end,
							setFunc			= function(value)
												ESOMRL.ASV.aOpts.fcoitemsaverT = value
												RefreshViews()
											end,
							default			= aDefaults.fcoitemsaverT,
							disabled		= function() return not FCOItemSaverActive end,
						},
			},
		},
	}

	if ESOMRL_Panel == nil then
		LAMPanel = LAM:RegisterAddonPanel('ESOMRL_Panel', panelData)
		LAM:RegisterOptionControls('ESOMRL_Panel', optionsData)
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Initialize the addon and the interactive recipe scroll list and set up formatting and event functions
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function InitMain()
	local control = GetControl('ESOMRL_MainFrameListFrameList')
	ZO_ScrollList_AddDataType(control, 1 , 'ESOMRL_ListItemTemplate', 20,  SetListItem)
end

local function InitRecipeTooltip(control)
	if not control then return end
	RecipeItemTooltipControl = control
	control:SetParent(PopupTooltipTopLevel)
end

local function InitIngredientTooltip(control)
	if not control then return end
	IngredientItemTooltipControl = control
	control:SetParent(PopupTooltipTopLevel)
end

local function InitValues()
	qualityCap[1] = pTC("00ff00",L.ESOMRL_QUALITY1)
	qualityCap[2] = pTC("3a92ff",L.ESOMRL_QUALITY2)
	qualityCap[3] = pTC("a02ef7",L.ESOMRL_QUALITY3)

	stringOpts[1] = L.ESOMRL_SKOPT1
	stringOpts[2] = L.ESOMRL_SKOPT2
	stringOpts[3] = L.ESOMRL_SKOPT3
	stringOpts[4] = L.ESOMRL_SKOPT4

	filterOpts[1] = "Enabled"
	filterOpts[2] = "Disabled"
	filterOpts[3] = "Ignore"

	stationTabs[1] = GetString(SI_PROVISIONERSPECIALINGREDIENTTYPE4)
	stationTabs[2] = GetString(SI_PROVISIONERSPECIALINGREDIENTTYPE1)
	stationTabs[3] = GetString(SI_PROVISIONERSPECIALINGREDIENTTYPE2)
	stationTabs[4] = GetString(SI_PROVISIONERSPECIALINGREDIENTTYPE3)

	for i = 1, 16 do writList[i] = {writ = 0} end

	for k, v in pairs(IngredientTable) do
		local qColor = dQC[GetItemLinkQuality(v.link)]
		IngredientIcons[k] = {icon = v.icon, color = qColor}
	end
end

local function ShowMain(option)
	if (ESOMRL.InitCheck == 3) then
		if option == 'reposition' then
			ESOMRL.ASV.aOpts.xpos = 0
			ESOMRL.ASV.aOpts.ypos = 0
			RestorePosition()
		elseif option == 'update' then
			ESOMRL.DB.InitTables(true)
		else
			local control = GetControl('ESOMRL_MainFrame')
			if ( control:IsHidden() ) then
				SCENE_MANAGER:ShowTopLevel(ESOMRL_MainFrame)
				setPage = 1
				setMode = 1
				openTab = 1
				RestorePosition()
				SetTrackedRecipeCountText()
				RecipePanelRestore()
				ESOMRL_MainFrameSelectionFrame:SetHidden(false)
				ESOMRL_MainFrameFurnitureFrame:SetHidden(true)
				ESOMRL_MainFrameListFrame:SetHidden(false)
				ESOMRL_MainFrameIngredientsFrame:SetHidden(true)
				ESOMRL_MainFrameFoodButton:SetHidden(true)
				ESOMRL_MainFrame3DButton:SetHidden(true)
				ESOMRL_MainFrameFurnitureButton:SetHidden(false)
				ESOMRL_MainFramePageButton:SetHidden(false)
				ESOMRL_MainFrameListFrameQuality:SetHidden(false)
				ESOMRL_MainFramePageButton:ClearAnchors()
				ESOMRL_MainFramePageButton:SetAnchor(TOPLEFT, ESOMRL_MainFrameFurnitureButton, TOPRIGHT, -9, 0)
				NavigateScrollList(1)
				RecountTracked()
			else
				SCENE_MANAGER:HideTopLevel(ESOMRL_MainFrame)
			end
		end
	else
		d("[MRL]: Please stand by...")
	end
end

local function ResetScrollList()
	if openTab == 51 then
		GetWrits()
	elseif openTab == 52 then
		IngRecipeSearch(ingSearch)
	elseif openTab == 53 then
		NavigateQuality()
	elseif (openTab ~= 50) and (openTab ~= 51) and (openTab ~= 52) and (openTab ~= 53) then
		ESOMRL.XMLNavigation(304, nil, nil, openTab)
	else
		TextSearch(1)
	end
	ESOMRL.ASV.aOpts.junkunmarkedrecipes = 0
	ESOMRL.ASV.aOpts.destroyunmarkedrecipes = 0
	RecipePanelRestore()
	SetTrackedRecipeCountText(true)
	if StationControl then
		zo_callLater(function() StationControl:RefreshRecipeList() end, 200)
	end
	RefreshViews()
end

local function OnEndCraftingStationInteract(eventCode)
	writAnim = false -- needed to prevent unexpected errors due to tail call on ZO_TreeHeader_OnMouseUp on exiting station
	local function CleanExit()
		ESOMRL:SetHidden(true)
		StationControl = nil
		SCENE_MANAGER:HideTopLevel(ESOMRL_MainFrame)
		EVENT_MANAGER:UnregisterForEvent('MasterRecipeList', EVENT_END_CRAFTING_STATION_INTERACT)
	end
	for i = 1, 16 do writList[i] = {writ = 0} end
	stationMode = 0
	stationTab = 0
	if stationMode == CRAFTING_TYPE_PROVISIONING then
		if (CheckCraftStore()) then
			CleanExit()
		else
			statNodes = {}
			ClearWritTarget()
			ClearStationSelection()
			CleanExit()
		end
		provOpen = false
	else
		ESOMRL:SetHidden(true)
		SCENE_MANAGER:HideTopLevel(ESOMRL_MainFrame)
		EVENT_MANAGER:UnregisterForEvent('MasterRecipeList', EVENT_END_CRAFTING_STATION_INTERACT)
	end
	ResetStationNavigation(3)
end

local function OnCraftingStationInteract(eventCode, craftSkill)
	if (not IsInGamepadPreferredMode()) then
		if craftSkill == CRAFTING_TYPE_PROVISIONING then
			local controlName = ZO_ProvisionerTopLevelNavigationContainer
			if ESOMRL:IsHidden() then
				if (CheckCraftStore()) then -- Station navigation offset for CraftStore
					local csts = CraftStoreFixed_CookTopSection
					CraftStoreFixed_Cook:SetHeight(841) -- 801
					csts:ClearAnchors() csts:SetAnchor(TOPLEFT, ESOMRL, BOTTOMLEFT, 0, 40)
					ESOMRL:ClearAnchors() ESOMRL:SetAnchor(TOPLEFT, CraftStoreFixed_Cook, TOPLEFT, 10, 10) ESOMRL:SetHidden(false)
					ESOMRLStationTitle:SetHidden(false)
					ESOMRLResetStationNavigation:SetHidden(true)
					ESOMRLFindInMRLButton:SetHidden(true)
					ESOMRLStationTooltipButton:SetHidden(true)
					ESOMRLStationTrackingButton:SetHidden(true)
				else
					ShowStationControls(controlName, -64, -128)
				end
			end
			SetSortOrder(4)
			zo_callLater(function() provOpen = true end, 500)
		end
		EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_END_CRAFTING_STATION_INTERACT, OnEndCraftingStationInteract)
	end

	if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING then
		local pMode = (IsInGamepadPreferredMode()) and GAMEPAD_PROVISIONER or PROVISIONER
		local lastTab = (lastProv == 0) and ESOMRL.ASV.aOpts.tabSelect or lastProv
		local tTab = (lastProv - 1 > 0) and lastProv - 1 or lastProv + 1

		if pMode.tabs and pMode.settings and pMode.settings.tabs and pMode.settings.tabs[tTab] and pMode.settings.tabs[tTab].descriptor then -- really just to prevent BugCatcher false positives
			ZO_MenuBar_SelectDescriptor(pMode.tabs, pMode.settings.tabs[tTab].descriptor)
			ZO_MenuBar_SelectDescriptor(pMode.tabs, pMode.settings.tabs[lastTab].descriptor)
		end
	end

	StationWritCheck()
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Handle auto-crafting writs
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
function ESOMRL.WritQueue()
	local function errorCondition(ing, know, item)
		if (know) then
			d("|cFF9900MRL|r: "..L.ESOMRL_WRITKNOWLEGE.." "..item)
			return -- don't need to know about missing ingredients for items you can't craft
		end
		if (ing) then d("|cFF9900MRL|r: "..L.ESOMRL_WRITING.." "..item) end
	end
	if not writBuffer then
		writBuffer = true

		if writCraft1.item ~= "" and (writCraft1.wIng) or (writCraft1.wKnow) then
			errorCondition(writCraft1.wIng, writCraft1.wKnow, writCraft1.item)
		end
		if writCraft2.item ~= "" and (writCraft2.wIng) or (writCraft2.wKnow) then
			errorCondition(writCraft2.wIng, writCraft2.wKnow, writCraft2.item)
		end
		zo_callLater(function() writBuffer = false end, 5000)
	end

	local pMode = (IsInGamepadPreferredMode()) and GAMEPAD_PROVISIONER or PROVISIONER
	if writCraft1.recipeIndex ~= nil and writCraft1.recipeIndex ~= -1 and ESOMRL.CSV.cOpts.cW1Crafted == 0 then
		if writCraft1.wIng == false and writCraft1.wKnow == false then
			ZO_MenuBar_SelectDescriptor(pMode.tabs, pMode.settings.tabs[2].descriptor)
			CraftProvisionerItem(writCraft1.recipeListIndex, writCraft1.recipeIndex, 1)
			ESOMRL.CSV.cOpts.cW1Crafted = 1
			writCraft1 = {}
			PlaySound(SOUNDS.CLOTHIER_EXTRACTED_BOOSTER)
		end
	elseif writCraft2.recipeIndex ~= nil and writCraft2.recipeIndex ~= -1 and ESOMRL.CSV.cOpts.cW2Crafted == 0 then
		if writCraft2.wIng == false and writCraft2.wKnow == false then
			ZO_MenuBar_SelectDescriptor(pMode.tabs, pMode.settings.tabs[3].descriptor)
			CraftProvisionerItem(writCraft2.recipeListIndex, writCraft2.recipeIndex, 1)
			ESOMRL.CSV.cOpts.cW2Crafted = 1
			writCraft2 = {}
			PlaySound(SOUNDS.CLOTHIER_EXTRACTED_BOOSTER)
		end
	end
end

function ESOMRL.AutoCraftWrits()
	local onWrit = GetWritID()
	if (ESOMRL.ASV.aOpts.autoWrits) and (onWrit ~= 0) then
		if GetCraftingInteractionType() == CRAFTING_TYPE_PROVISIONING then

			writCraft1 = {recipeListIndex = -1, recipeIndex = -1, wIng = true, wKnow = true, item = ""}
			writCraft2 = {recipeListIndex = -1, recipeIndex = -1, wIng = true, wKnow = true, item = ""}

			for recipeListIndex = 1, GetNumRecipeLists() do -- populate the recipe list index
				local _, numRecipes = GetRecipeListInfo(recipeListIndex)
				for recipeIndex = 1, numRecipes do
					local known, recipeName, numIngredients, _, _, _, _, itemId = GetRecipeInfo(recipeListIndex, recipeIndex) -- this gives the result item ID even if you don't know the recipe

					if itemId and itemId ~= 0 and itemId == ESOMRL.CSV.cOpts.cWrit1 or itemId == ESOMRL.CSV.cOpts.cWrit2 then
						local itemLink = ProvisioningTable[ProvisioningKeys[itemId].ID].link
						local ingMissing = 0
		
						local wReq = (itemId == ESOMRL.CSV.cOpts.cWrit1) and 1 or 2
		
						for ingredientIndex = 1, numIngredients do -- check if missing any ingredients
							local ingredientName, amountInInventoryAndBank, amountRequired = GetItemLinkRecipeIngredientInfo(itemLink, ingredientIndex)
							if tonumber(amountInInventoryAndBank) < tonumber(amountRequired) then
								ingMissing = ingMissing + 1 -- warn if unable to craft due to not enough ingredients (if debug enabled)
							end
						end
	
						if wReq == 1 then
							writCraft1.recipeListIndex = recipeListIndex
							writCraft1.recipeIndex = recipeIndex
							writCraft1.wKnow = not known
							writCraft1.item = GetItemLinkFromID(itemId)
							if ingMissing == 0 then
								writCraft1.wIng = false
							end
						elseif wReq == 2 then
							writCraft2.recipeListIndex = recipeListIndex
							writCraft2.recipeIndex = recipeIndex
							writCraft2.wKnow = not known
							writCraft2.item = GetItemLinkFromID(itemId)
							if ingMissing == 0 then
								writCraft2.wIng = false
							end
						end
					end
				end
			end

			if writCraft1.recipeIndex ~= -1 or writCraft2.recipeIndex ~= -1 then
				zo_callLater(function() ESOMRL.WritQueue() end, 10)
			end
		end
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Global function to check if MRL is tracking a recipe or ingredient
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
function ESOMRL.ISMRLTracking(itemLink)
	if itemLink ~= nil then
		local rLink = GetItemLinkRecipeResultItemLink(itemLink)
		local nrId = GetItemLinkItemId(rLink)
		local nsId = GetItemLinkItemId(itemLink)
		if IngredientTable[nsId] ~= nil then
			if GetIngredientSavedVar(nsId) == 1 then
				return true
			end
		elseif ProvisioningTable[nsId] ~= nil then
			local checktracking = GetRecipeSavedVar(nrId, 1)
			if checktracking == 1 or checktracking == 2 then return true end
		elseif FurnitureTable[nsId] ~= nil then
			local checktracking = GetRecipeSavedVar(nrId, 100)
			if checktracking == 1 or checktracking == 2 then return true end
		end
	end
	return false
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Handle function calls from XML
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
function ESOMRL.XMLNavigation(option, control, extra, n1, n2)
-- List click and tooltips
	if option == 001 then
		ListTooltips(control, extra, n1)
	elseif option == 002 then
		RecipeListClick(extra, n1)
-- Main Frame functions
	elseif option == 101 then
		MoveStopSet(1)
	elseif option == 102 then
		InitMain()
	elseif option == 103 then
		InitRecipeTooltip(control)
	elseif option == 104 then
		InitIngredientTooltip(control)
	elseif option == 105 then
		CloseMain(n1)
	elseif option == 106 then
		ToggleTooltips(n1)
	elseif option == 107 then
		InfoTooltip(n1)
	elseif option == 108 then
		SwitchMode(n1)
	elseif option == 109 then
		ShowPreviewIcon(n1)
	elseif option == 110 then
		SwitchPage(n1)
	elseif option == 111 then
		StatusTooltip(n1)
-- Ingredient Frame functions
	elseif option == 201 then
		IngredientListClick(control, extra, n1, n2)
	elseif option == 202 then
		ClearTrackedIngredients()
	elseif option == 203 then
		TrackedRecipeIngredients(n1)
	elseif option == 204 then
		SelectAllIngredients(n1, n2)
	elseif option == 205 then
		JunkUnmarkedIngredientFunction(n1)
	elseif option == 206 then
		FindIngredientRecipes(n1, n2)
-- Left side navigation
	elseif option == 301 then
		ClearTrackedRecipes()
	elseif option == 302 then
		WritButton(n1)
	elseif option == 303 then
		GetWrits()
	elseif option == 304 then
		if IsShiftKeyDown() == true then
			TrackNavigationTier(n1)
		end
		NavigateScrollList(n1)
	elseif option == 305 then
		SelectTooltipStyle(n1)
	elseif option == 306 then
		RecipeOptionPanel(n1)
	elseif option == 307 then
		SpecialRecipeTooltips(n1, n2)
-- Improvement quality navigation
	elseif option == 308 then
		QualityTooltips(n1, n2)
	elseif option == 309 then
		if IsShiftKeyDown() == true then
			TrackQuality(n1)
		end
		lastTier = n1
		NavigateQuality()
-- Track all listed recipes
	elseif option == 310 then
		TrackShownTooltips(n1)
	elseif option == 311 then
		TrackShown()
-- Furniture navigation icons
	elseif option == 312 then
		FurnitureNavigation(n1)
-- Known/Unknown filter buttons
	elseif option == 320 then
		KnownUnknownUI(n1)
-- Text search options
	elseif option == 401 then
		TextBoxEvents(n1)
-- Open Main Window
	elseif option == 501 then
		ShowMain()
-- Reset current scroll list
	elseif option == 502 then
		ResetScrollList()
-- Recipe config menu functions
	elseif option == 601 then
		TrackUnknownRecipes(n1)
	elseif option == 602 then
		TrackAllRecipes(n1)
	elseif option == 603 then
		JunkUnmarkedRecipeFunction(n1)
	elseif option == 604 then
		RemoveCharacter(n1)
-- Cooking station controls
	elseif option == 701 then
		StationButtonTooltip(control, n1)
	elseif option == 702 then
		HighlightTracked(n1)
	elseif option == 703 then
		ToggleStationTooltips(n1)
	elseif option == 704 then
		StationSearch(control, n1, n2)
	elseif option == 705 then
		ResetStationNavigation(n1)
	elseif option == 706 then
		SetSortOrder(extra, n1)
	elseif option == 707 then
		StationNavBarMoved()
	end
end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Addon initialization
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
local function DBMaintenance() -- Checks if update to the database tables is necessary
	if ESOMRL.ASV.aOpts.version < 1.5643 then
		if not ESOMRL.ResetPending then
			ESOMRL.DB.InitTables(true)
		end
		ESOMRL.ASV.aOpts.kOnly = false
		ESOMRL.ASV.aOpts.uOnly = false
		ESOMRL.ASV.aOpts.version = 1.5643
		DBMaintenance()
	elseif ESOMRL.ASV.aOpts.version < 1.5644 then
		for k, v in pairs(ESOMRL.DB.SkillTypes) do
			ESOMRL.ASV.aOpts.sttx[k] = 0
			ESOMRL.ASV.aOpts.stty[k] = 0
		end
		ESOMRL.ASV.aOpts.version = 1.5644
	end
end

local function OnAddonLoaded(event, addonName)
	--Init bindings hooks and saved variables
	if addonName ~= 'MasterRecipeList' then return end
	EVENT_MANAGER:UnregisterForEvent('MasterRecipeList', EVENT_ADD_ON_LOADED)
	SCENE_MANAGER:RegisterTopLevel(ESOMRL_MainFrame, false)
	ZO_CreateStringId('SI_BINDING_NAME_TOGGLE_RECIPE_WINDOW', 'Toggle Recipe Window')
	cDefaults, aDefaults = ESOMRL.DB.DefaultVars()
	ESOMRL.DB.SetupVars()
	ESOMRL.InitCheck = 0
	ESOMRL.ResetPending = false
	worldName = GetWorldName()
	accountName = GetDisplayName()
	writQuest = LangFormat(GetQuestName(5412))
	HookBags()
	HookTooltips()
	HookStation()
end

local function Init(_, initial)

	if ESOMRL.InitCheck == 0 then
		ESOMRL.InitCheck = 1
		ESOMRL.DB.InitTables(false) -- runs the main init script for the addon
		zo_callLater(function() Init(_, initial) end, 1000) -- starts the wait loop before running final startup functions

	elseif ESOMRL.InitCheck == 2 then

	-- Addon compatibility checks
		FCOItemSaverActive = (FCOIS ~= nil)
		if not FCOItemSaverActive then ESOMRL.ASV.aOpts.fcoitemsaverT = false ESOMRL.ASV.aOpts.fcoitemsaverU = false ESOMRL.CSV.cOpts.fcoitemsaverCO = false end
		if AwesomeGuildStore then
			AwesomeGuildStore:RegisterCallback(AwesomeGuildStore.callback.AFTER_INITIAL_SETUP, AGSHooks)
		else
			AGSHooks()
		end

	-- Run startup functions
		DBMaintenance()
		InitValues()
		SetupCharacters()
		CreateSettingsWindow(addonName)
		StationWritCheck()
		InitKnown() -- necessary to wait until character is loaded to check recipe known status

	-- gamepad mode station integration not currently supported
		if IsInGamepadPreferredMode() then
			if ESOMRL.ASV.aOpts.debugmode == true then
				d(L.ESOMRL_GAMEPADMODE)
			end
		end

	-- put in 'running' state to avoid re-initializing anything when the game does load screens
		ESOMRL.InitCheck = 3
--	elseif ESOMRL.InitCheck == 3 then
	--	d("load screen check")

	elseif ESOMRL.InitCheck == 1 then
		zo_callLater(function() Init(_, initial) end, 1000)
	end

-- Pre-filter for supported criteria using event filters for speed on heavy events
	EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_INVENTORY_SINGLE_SLOT_UPDATE, OnInventorySlotUpdate)
	EVENT_MANAGER:AddFilterForEvent('MasterRecipeList', EVENT_INVENTORY_SINGLE_SLOT_UPDATE, REGISTER_FILTER_IS_NEW_ITEM, true)
	EVENT_MANAGER:AddFilterForEvent('MasterRecipeList', EVENT_INVENTORY_SINGLE_SLOT_UPDATE, REGISTER_FILTER_BAG_ID, BAG_BACKPACK)
	EVENT_MANAGER:AddFilterForEvent('MasterRecipeList', EVENT_INVENTORY_SINGLE_SLOT_UPDATE, REGISTER_FILTER_INVENTORY_UPDATE_REASON, INVENTORY_UPDATE_REASON_DEFAULT)
end

SLASH_COMMANDS['/recipes'] = ShowMain
SLASH_COMMANDS['/mrl'] = function(option) ShowMain(option) end
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_PLAYER_ACTIVATED, Init)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_ADD_ON_LOADED, OnAddonLoaded)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_RECIPE_LEARNED, InitKnown)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_TRADING_HOUSE_RESPONSE_RECEIVED, HookTradeHouse)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_OPEN_STORE, HookBuyback)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_QUEST_ADDED, OnQuestAdded)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_QUEST_REMOVED, OnQuestRemoved)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_QUEST_COMPLETE, OnQuestComplete)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_QUEST_CONDITION_COUNTER_CHANGED, OnQuestConditionCounterChanged)
EVENT_MANAGER:RegisterForEvent('MasterRecipeList', EVENT_CRAFTING_STATION_INTERACT, OnCraftingStationInteract)
