local a={"ScriptTracker"}
local b={}local c={}b=b or{}c=c or{}c.tracker={}local function e()return string.gsub('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx',"[xy]",function(f)local g=f=='x'and math.random(0,0xf)or math.random(8,0xf)return string.format('%x',g)end)end;c.name=e()local function h(self,i)if self==nil then return{}end;if i==nil then i="%s"end;local j={}for k in string.gmatch(self,"([^"..i.."]+)")do if k~=nil and k~=""then table.insert(j,k)end end;return j end;function get_G(l,m,n)if#m==n then return l[m[n]]else return get_G(l[m[n]],m,n+1)end end;function b.new(self,l,o)local m=l:split("\.")local p;if#m==1 then p=_G[m[1]]else p=get_G(_G[m[1]],m,2)end;if p==nil then d(l.." doesn't exist")return end;local q={timer=nil,tracked=l,tracking=Observable:new(true),executionTimeByFunction={},maxLayer=20,deepscan=o,scanned={}}q.tracking:register(function(r,s)if s==false then EVENT_MANAGER:UnregisterForUpdate(c.name.."Update")end end)setmetatable(q,self)self.__index=self;q:Scan(p,0,l)EVENT_MANAGER:UnregisterForUpdate(c.name.."Update")EVENT_MANAGER:RegisterForUpdate(c.name.."Update",1000,function()d("|cff7900---1000ms--------------|r")end)return q end;local function t(...)return{...}end;function b.Debug(self,u,v,...)self:StartRunningTimeClock()local w=t(...)local x;local y,errorstr=pcall(function()x,errorstr=t(v(unpack(w)))end)if y==true then self:StopRunningTimeClock(u)return unpack(x)else self:StopRunningTimeClock(u)d("|cff0000------------>"..u.."|r")d("Error:")d(errorstr)d("Variables:")d(w)d("|cff0000<------------|r")return nil end end;local function z(k,A)if type(k)=="number"then return false end;return k:find(A,1,true)~=nil end;function b.Scan(self,B,C,u)if C>self.maxLayer then return end;if B==nil then return end;for D,s in pairs(B)do if not z(D,"ZO")then if type(s)=="function"then self.executionTimeByFunction[D]={}B[D]=function(...)return self:Debug(D,s,...)end elseif type(s)=="table"and s~=B and self.deepscan==true then if self.scanned[u..tostring(D)]~=true then self.scanned[u..tostring(D)]=true;self:Scan(s,C+1,u..tostring(D))end end end end end;function b.StartRunningTimeClock(self)self.timer=os.rawclock()end;function b.StopRunningTimeClock(self,B)if self.tracking.value==false then return end;local E=os.rawclock()-(self.timer or os.rawclock())self.timer=nil;table.insert(self.executionTimeByFunction[B],E)if E<2 then d("|cffff00["..self.tracked.."-Debug]|r "..B.." took |c00ff00"..E.."ms|r")elseif E<4 then d("|cffff00["..self.tracked.."-Debug]|r "..B.." took |cff7900"..E.."ms|r")else d("|cffff00["..self.tracked.."-Debug]|r "..B.." took |cff0000"..E.."ms|r")end end;function b.ListExecutionTimeByFunction(self)for D,F in pairs(self.executionTimeByFunction)do local G=0;local H=0;for r,s in pairs(F)do G=G+1;H=H+s end;if G>0 then local I=H/G;if I<2 then d("|cffff00["..self.tracked.."-ETBF]|r "..D.." avg |c00ff00"..I.."ms|r")elseif I<4 then d("|cffff00["..self.tracked.."-ETBF]|r "..D.." avg |cff7900"..I.."ms|r")else d("|cffff00["..self.tracked.."-ETBF]|r "..D.." avg |cff0000"..I.."ms|r")end end end end;if Observable~=true then for r,s in pairs(a)do _G[s]._debugFunction=function()for r,J in pairs(a)do if c.tracker[J]~=nil then c.tracker[J].tracking.value=false;d("Stopped tracking")c.tracker[J]:ListExecutionTimeByFunction()else c.tracker[J]=b:new(J,true)end end end;SLASH_COMMANDS["/debug_"..s:lower()]=function()_G[s]._debugFunction()end end end